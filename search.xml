<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一条http请求的处理过程</title>
    <url>/2020/03/21/%E6%9D%A1http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一条http请求的处理过程"><a href="#一条http请求的处理过程" class="headerlink" title="一条http请求的处理过程"></a>一条http请求的处理过程</h1><p><img src="../images/http请求.png" alt="http请求"></p>
<h2 id="client发送请求"><a href="#client发送请求" class="headerlink" title="client发送请求"></a>client发送请求</h2><h2 id="DNS解析请求得域名-—-gt-ip地址"><a href="#DNS解析请求得域名-—-gt-ip地址" class="headerlink" title="DNS解析请求得域名 —&gt; ip地址"></a>DNS解析请求得域名 —&gt; ip地址</h2><h2 id="TCP-IP-UDP-IP四层传输协议"><a href="#TCP-IP-UDP-IP四层传输协议" class="headerlink" title="TCP/IP,UDP/IP四层传输协议"></a>TCP/IP,UDP/IP四层传输协议</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>发送http请求</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>组装TCP头信息 —&gt; 【TCP头信息】【http请求报文】</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>组装IP信息 —&gt; 【ip信息】【TCP头信息】【http请求报文】</p>
<h3 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h3><p>组装MAC信息 —&gt; 【MAC信息】【ip信息】【TCP头信息】【http请求报文】</p>
<h2 id="网络接口层发送数据"><a href="#网络接口层发送数据" class="headerlink" title="网络接口层发送数据"></a>网络接口层发送数据</h2><p>发送这样的数据：[01010110101010]</p>
<h2 id="目标服务器处理数据"><a href="#目标服务器处理数据" class="headerlink" title="目标服务器处理数据"></a>目标服务器处理数据</h2>]]></content>
      <categories>
        <category>网络通讯</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>redis的使用及集群</title>
    <url>/2020/03/12/dis%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="redis数据结构-："><a href="#redis数据结构-：" class="headerlink" title="redis数据结构 ："></a>redis数据结构 ：</h2><h3 id="string"><a href="#string" class="headerlink" title="string:"></a>string:</h3><p><code>set key,value ,set key value ex time</code></p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>所有的键值对的键和值的长度都小于等于64byte，哈希对象保存的键值对数量都小于512：ziplist，hashtable 对象 </p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>quicklist 消息队列</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>inset：如果元素类型都是整型，并且元素个数不小于512，hashtab，点赞，互相关注</p>
<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>元素数量小于128，所有member的长度小于64字节使用ziplist，否则升级为skiplist，热点排序 ，有一个score</p>
<h2 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h2><h3 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h3><p>lpush：左插入数据</p>
<p>lpushx：做插入数据， 前提条件是key存在并且key为列表</p>
<p>rpush：右插入</p>
<p>rpushx：右插入， 前提条件是key存在并且key为列表</p>
<p>rpop：右弹出</p>
<p>lpop：左弹出</p>
<p>lrange：弹出一个范围内的数据</p>
<p>blpop：左阻塞式的弹出</p>
<p>brpop：右阻塞式的弹出</p>
<h3 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h3><p>1、set：sadd添加，spop删除，smembers 查看所有元素，sinter交集，sunion合集，sdiff差集</p>
<h3 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h3><h3 id="zset-1"><a href="#zset-1" class="headerlink" title="zset"></a>zset</h3><h3 id="string-1"><a href="#string-1" class="headerlink" title="string"></a>string</h3><h2 id="redis热点数据："><a href="#redis热点数据：" class="headerlink" title="redis热点数据："></a>redis热点数据：</h2><p>1、客户端统计的方式</p>
<p>2、代理层：TwemProxy或 Codis</p>
<p>3、服务端统计：monitor监控，但是只能监控到一个节点</p>
<p>4、机器层面：抓包的形式</p>
<h2 id="redis查看内存使用信息："><a href="#redis查看内存使用信息：" class="headerlink" title="redis查看内存使用信息："></a>redis查看内存使用信息：</h2><p><code>info memory</code></p>
<h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>master node 第一次执行全量复制，通过bgsave命令在本地生成一份RDB文件，将RDB快照文件发送给slave节点，slave node 会先清空自己的旧数据，然后从RDB文件中加载数据。</p>
<h3 id="在生成rdb文件中，master-node-如果接收到新的写命令怎么办？"><a href="#在生成rdb文件中，master-node-如果接收到新的写命令怎么办？" class="headerlink" title="在生成rdb文件中，master node 如果接收到新的写命令怎么办？"></a>在生成rdb文件中，master node 如果接收到新的写命令怎么办？</h3><p>master会把所有的新的写命令缓存在内存中，在slave node 保存了RDB文件之后，再讲新的命令复制给slave node</p>
<h3 id="主从复制的不足："><a href="#主从复制的不足：" class="headerlink" title="主从复制的不足："></a>主从复制的不足：</h3><p>1、当RDB文件过大时同步非常耗时</p>
<p>2、在一主多从情况下，当master node 挂了后。对外服务就不可用了，单点问题并没有解决。如果每次都手动把之前的服务器切换为主服务器，这就比较费力。</p>
<h2 id="可用性保证之sentinel"><a href="#可用性保证之sentinel" class="headerlink" title="可用性保证之sentinel"></a>可用性保证之sentinel</h2><p>sentinel是一个监听，监听redis集群中的master和slave，如果master一定时间内没有给sentinel回复消息，则将master标记为下线，然后把某一个slave标记为master，应用每一次都从这个监控服务器拿到master的地址。</p>
<p>sentinel通过info命令来获取到redis集群中的节点的信息。</p>
<p>服务下线：当sentinel监听到master节点下线后，会进行故障转移</p>
<p>故障转移：故障转移的第一步就是在sentinel集群中选举出一个leader节点，然后让这个leader指定出一个master节点。</p>
<h3 id="sentinel集群选举算法"><a href="#sentinel集群选举算法" class="headerlink" title="sentinel集群选举算法"></a>sentinel集群选举算法</h3><p>类似raft算法。raft算法：首先会生成一个150-300ms的时间，默认最小时间的为leader，如果时间一样则再次生成时间。</p>
<p>1、master客观下线会触发选举，而不是过了时间才会</p>
<p>2、leader并不会把自己成为leader的信息发送给其他sentinel节点。其他sentinel等待leader从slave选举出master后，检测新的master节点正常运行后，就会去掉客观下线的标识，从而不需要进入故障转移流程。</p>
<h3 id="sentienl根据什么来指定master节点："><a href="#sentienl根据什么来指定master节点：" class="headerlink" title="sentienl根据什么来指定master节点："></a>sentienl根据什么来指定master节点：</h3><p>1、断开连接时间：如果与哨兵连接断开时间过长，超过了某个阈值，就直接失去了选举权，</p>
<p>2、优先级：如果拥有了选举权，那就判断谁的优先级更高，数值越小优先级越高</p>
<p>3、复制数量：如果优先级也一样，就判断谁从master节点中复制的数据最多。</p>
<p>4、进程id：如果复制数量一样，就选择进程id最小的那个。</p>
<h3 id="哨兵机制的不足："><a href="#哨兵机制的不足：" class="headerlink" title="哨兵机制的不足："></a>哨兵机制的不足：</h3><p>主从切换中会丢失数据，因为只有一个master，salve节点 的数据使用RDB文件复制的。</p>
<p>只能单点写，没有解决扩容的问题</p>
<p>如果数据量过大，我们就需要多个master-slave的group</p>
<h2 id="redis数据的分片"><a href="#redis数据的分片" class="headerlink" title="redis数据的分片"></a>redis数据的分片</h2><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><p>客户端根据key进行hash计算，来进行分片。</p>
<p>ShardedJedis</p>
<h3 id="代理层"><a href="#代理层" class="headerlink" title="代理层"></a>代理层</h3><p>将分片逻辑提取出来，运行一个独立的代理服务，客户端连接到这个代理服务，代理服务做请求转发。</p>
<p>Twemproxy，Codis</p>
<h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>Redis Cluster</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试题整理</title>
    <url>/2020/03/04/va%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><ol>
<li>多个线程同时读写，读线程的数量量远远⼤大于写线程，你认为应该如何解决 并发的问题？你会选择加什么样的锁？</li>
<li>JAVA的AQS是否了了解，它是⼲干嘛的？</li>
<li>除了了synchronized关键字之外，你是怎么来保障线程安全的？</li>
<li>什么时候需要加volatile关键字？它能保证线程安全吗？</li>
<li>线程池内的线程如果全部忙，提交⼀一个新的任务，会发⽣生什么？队列列全部 塞满了了之后，还是忙，再提交会发⽣生什什么？</li>
<li>Tomcat本身的参数你⼀一般会怎么调整？</li>
<li>synchronized关键字锁住的是什么东⻄西？在字节码中是怎么表示的？在内 存中的对象上表现为什么？</li>
<li>wait/notify/notifyAll⽅方法需不不需要被包含在synchronized块中？这是为什 么？</li>
<li>ExecutorService你⼀一般是怎么⽤用的？是每个service放⼀一个还是⼀一个项⽬目<br>⾥里里⾯面放⼀一个？有什么好处？<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2></li>
<li>你有没有⽤用过Spring的AOP? 是⽤用来干嘛的? ⼤大概会怎么使⽤用？</li>
<li>如果一个接口有2个不同的实现, 那么怎么来Autowire⼀一个指定的实现？</li>
<li>Spring的声明式事务 @Transaction注解⼀一般写在什么位置? 抛出了了异常会⾃自动回滚吗？有没有办法控制不不触发回滚?</li>
<li>如果想在某个Bean⽣生成并装配完毕后执⾏行行⾃自⼰己的逻辑，可以什么⽅方式实现？</li>
<li>SpringBoot没有放到web容器器⾥里里为什么能跑HTTP服务？</li>
<li>SpringBoot中如果你想使⽤用⾃自定义的配置⽂文件⽽而不不仅仅是<br>application.properties，应该怎么弄弄？</li>
<li>SpringMVC中RequestMapping可以指定GET, POST方法么？怎么指定？</li>
<li>SpringMVC如果希望把输出的Object(例例如XXResult或者XXResponse)这种包装为JSON输出, 应该怎么处理理?</li>
<li>怎样拦截SpringMVC的异常，然后做⾃自定义的处理理，比如打⽇日志或者包装成JSON<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2></li>
<li>如果有很多数据插⼊入MYSQL 你会选择什么⽅方式?</li>
<li>如果查询很慢，你会想到的第⼀一个⽅方式是什么？索引是⼲干嘛的?</li>
<li>如果建了了⼀一个单列列索引，查询的时候查出2列列，会⽤用到这个单列列索引吗？</li>
<li>如果建了了⼀一个包含多个列列的索引，查询的时候只⽤用了了第⼀一列列，能不不能⽤用上这个索引？查三列列呢？</li>
<li>接上题，如果where条件后⾯面带有⼀一个 i + 5 &lt; 100 会使⽤用到这个索引吗？</li>
<li>怎么看是否⽤用到了了某个索引？</li>
<li>like %aaa%会使⽤用索引吗? like aaa%呢?</li>
<li>drop、truncate、delete的区别？</li>
<li>平时你们是怎么监控数据库的? 慢SQL是怎么排查的？</li>
<li>你们数据库是否⽀支持emoji表情，如果不不⽀支持，如何操作?</li>
<li>你们的数据库单表数据量量是多少？⼀一般多⼤大的时候开始出现查询性能急剧下降？</li>
<li>查询死掉了了，想要找出执⾏行行的查询进程⽤用什什么命令？找出来之后⼀一般你 会⼲干嘛？</li>
<li>读写分离是怎么做的？你认为中间件会怎么来操作？这样操作跟事务有 什什么关系？</li>
<li>分库分表有没有做过？线上的迁移过程是怎么样的？如何确定数据是正确的？<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2></li>
<li>你知道哪些或者你们线上使⽤用什什么GC策略略? 它有什什么优势，适⽤用于什什么场景？</li>
<li>JAVA类加载器器包括⼏几种？它们之间的⽗父⼦子关系是怎么样的？双亲委派机制是什什么意思？有什什么好处？</li>
<li>如何⾃自定义⼀一个类加载器器？你使⽤用过哪些或者你在什什么场景下需要⼀一个⾃自定义的类加载器器吗？</li>
<li>堆内存设置的参数是什什么？</li>
<li>Perm Space中保存什什么数据? 会引起OutOfMemory吗？</li>
<li>做gc时，⼀一个对象在内存各个Space中被移动的顺序是什什么？</li>
<li>你有没有遇到过OutOfMemory问题？你是怎么来处理理这个问题的？处理理过程中有哪些收获？</li>
<li>1.8之后Perm Space有哪些变动? MetaSpace⼤大⼩小默认是⽆无限的么? 还是你们会通过什什么⽅方式来指定⼤大⼩小?</li>
<li>Jstack是⼲干什什么的? Jstat呢? 如果线上程序周期性地出现卡顿，你怀疑可能是gc导致的，你会怎么来排查这个问题？线程⽇日志⼀一般你会看其中的什什么   部分？</li>
<li>StackOverFlow异常有没有遇到过？⼀一般你猜测会在什什么情况下被触发？如何指定⼀一个线程的堆栈⼤大⼩小？⼀一般你们写多少？<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2></li>
<li>⽇日志特别⼤大只想看最后100⾏行行怎么弄弄?   如果想⼀一直看⽇日志的持续输出，⽤用什什么命令?</li>
<li>如果⽇日志⼀一边输出，⼀一边想实时看到有没有某个关键字应该怎么弄弄？</li>
<li>grep如果忽略略⼤大⼩小写应该怎么弄弄? 正则表达式呢？</li>
<li>vim往下⼀一⾏行行是什什么键？往下30⾏行行呢? 跳到⽂文件末尾⼀一⾏行行是什什么? 跳回来是什什么? 向后搜索是什什么?</li>
<li>如果有个⽂文本⽂文件，按空格作为列列的分隔符，如果想统计第三列列⾥里里⾯面的每个单词的出现次数应该怎么弄弄？</li>
<li>如果把上⾯面的出现次数排个序应该怎么弄弄?  想按照数字本身的顺序⽽而不不是字符串串的顺序排列列怎么弄弄？</li>
<li>Linux环境变量量是以什什么作为分隔符的？环境变量量通过什什么命令设置？</li>
<li>给某个⽂文件权设置限⽐比如设置为644 是⽤用什什么命令？这个6是什什么意思？</li>
<li>Linux下⾯面如果想看某个进程的资源占⽤用情况是怎么看的？系统load⼤大概 指的什什么意思？你们线上系统load⼀一般多少？如果⼀一个4核机器器，你认为多少load是⽐比较正常的？top命令⾥里里⾯面按⼀一下1会发⽣生什什么?</li>
<li>top命令⾥里里⾯面，有时候所有进程的CPU使⽤用率加起来超过100%是怎么回  事？</li>
<li>还有哪些查看系统性能或者供你发现问题的命令？你⼀一般是看哪个参数？</li>
<li>想看某个进程打开了了哪些⽹网络连接是什什么命令？⾥里里⾯面连接的状态你⽐比较关⼼心哪⼏几种？<br>– 偏题</li>
<li>有没有做过Linux系统参数⽅方⾯面的优化，⼤大概优化过什什么？</li>
<li>系统参数⾥里里⾯面有个叫做backlog的可以⽤用来⼲干什什么？</li>
<li>查看⽹网络连接发现好多TIME_WAIT 可能是什什么原因？对你的应⽤用会有什什么影响？你会选择什什么样的⽅方式来减少这些TIME_WAIT</li>
<li>可否介绍⼀一下TCP三次握⼿手的过程，如果现在有个⽹网络程序，你⽤用第三⽅方  的library来发送数据，你怀疑这个library发送的数据有问题，那么怎么来验   证？tcpdump导出的⽂文件你⼀一般是怎么分析的？</li>
<li>KeepAlive是⽤用来⼲干什什么的？这样的好处是什什么？<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2>– 开发</li>
<li>缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题</li>
<li>你是怎么触发缓存更更新的？(⽐比如设置超时时间(被动⽅方式),    ⽐比如更更新的时候主动update)？如果是被动的⽅方式如何控制多个⼊入⼝口同时触发某个缓存更更新？</li>
<li>你们⽤用Redis来做什什么？为什什么不不⽤用其他的KV存储例例如Memcached,<br>Cassandra等?</li>
<li>你们⽤用什什么Redis客户端? Redis⾼高性能的原因⼤大概可以讲⼀一些?</li>
<li>你熟悉哪些Redis的数据结构? zset是⼲干什什么的? 和set有什什么区别?</li>
<li>Redis的hash, 存储和获取的具体命令叫什什么名字?</li>
<li>LPOP和BLPOP的区别?</li>
<li>Redis的有⼀一些包含SCAN关键字的命令是⼲干嘛的?  SCAN返回的数据量量是固定的吗?</li>
<li>Redis中的Lua有没有使⽤用过? 可以⽤用来做什什么? 为什什么可以这么⽤用?</li>
<li>Redis的Pipeline是⽤用来⼲干什什么的?<br>– 运维</li>
<li>Redis持久化⼤大概有⼏几种⽅方式? aof和rdb的区别是什什么?  AOF有什什么优缺点吗?</li>
<li>Redis Replication的⼤大致流程是什什么? bgsave这个命令的执⾏行行过程?<br>– 偏题</li>
<li>如果有很多 KV数据要存储到Redis, 但是内存不不⾜足, 通过什什么⽅方式可以缩减内存? 为什什么这样可以缩⼩小内存?</li>
<li>Redis中List, HashTable都⽤用到了了ZipList, 为什什么会选择它?</li>
</ol>
<h2 id="监控、稳定性"><a href="#监控、稳定性" class="headerlink" title="监控、稳定性"></a>监控、稳定性</h2><ol>
<li>业务⽇日志是通过什什么⽅方式来收集的？</li>
<li>线上机器器如何监控？采⽤用什什么开源产品或者⾃自研的产品？它是分钟级的还 是秒级的？</li>
<li>如果让你来想办法收集⼀一个JAVA后端应⽤用的性能数据，你会在意哪些⽅方<br>⾯面? 你会选择什什么样的⼯工具、思路路来收集?</li>
<li>⼀一般你调⽤用第三⽅方的时候会不不会监控调⽤用情况？</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>线程池的基本使用</title>
    <url>/2020/03/04/%E6%B1%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="线程池的基本使用"><a href="#线程池的基本使用" class="headerlink" title="线程池的基本使用"></a>线程池的基本使用</h2><h3 id="线程池的参数："><a href="#线程池的参数：" class="headerlink" title="线程池的参数："></a>线程池的参数：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,// 核心线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,// 最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,// 超过核心线程数的其他线程存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,// 超过核心线程数的其他线程存活时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,// 阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,// 线程创建工厂</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略</span></span></span><br></pre></td></tr></table></figure>
<h3 id="阻塞队列："><a href="#阻塞队列：" class="headerlink" title="阻塞队列："></a>阻塞队列：</h3><table>
<thead>
<tr>
<th>类名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayBlockingQueue</code></td>
<td>初始化是设置queue的大小</td>
</tr>
<tr>
<td><code>LinkedBlockingQueue</code></td>
<td>链表实现的有界阻塞队列, 此队列的默认和最大长度为<code>Integer.MAX_VALUE</code>。此队列按照先进先出的原则对元素进行排序</td>
</tr>
<tr>
<td><code>SynchronousQueue</code></td>
<td>不存储元素的阻塞队列, 每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素。</td>
</tr>
<tr>
<td><code>PriorityBlockingQueue</code></td>
<td>支持优先级排序的无界阻塞队列, 默认情况下元素采取自然顺序升序排列。也可以自定义类实现 <code>compareTo()</code>方法来指定元素排序规则，或者初始化 <code>PriorityBlockingQueue</code> 时，指定构造参数 Comparator 来对元素进行排序。</td>
</tr>
<tr>
<td><code>DelayQueue</code></td>
<td>优先级队列实现的无界阻塞队列</td>
</tr>
<tr>
<td><code>LinkedTransferQueue</code></td>
<td>链表实现的无界阻塞队列</td>
</tr>
<tr>
<td><code>LinkedBlockingDeque</code></td>
<td>链表实现的双向阻塞队列</td>
</tr>
</tbody>
</table>
<h3 id="阻塞队列的操作："><a href="#阻塞队列的操作：" class="headerlink" title="阻塞队列的操作："></a>阻塞队列的操作：</h3><h5 id="增加："><a href="#增加：" class="headerlink" title="增加："></a>增加：</h5><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>add</td>
<td>往Queue里添加数据，如果队列满了，抛出异常</td>
</tr>
<tr>
<td>offer</td>
<td>往Queue里添加数据，添加成功return true，添加失败return false</td>
</tr>
<tr>
<td>enqueue(不能直接使用)</td>
<td>添加数据的具体操作，添加完成会signal()唤醒阻塞点线程</td>
</tr>
<tr>
<td>put</td>
<td>添加数据，阻塞式添加。</td>
</tr>
</tbody>
</table>
<h5 id="取出："><a href="#取出：" class="headerlink" title="取出："></a>取出：</h5><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>take</td>
<td>阻塞式取值</td>
</tr>
<tr>
<td>dequeue(不可直接使用)</td>
<td>取值核心逻辑</td>
</tr>
<tr>
<td>poll</td>
<td>非阻塞时取值</td>
</tr>
</tbody>
</table>
<h5 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h5><p>remove删除数据。</p>
]]></content>
  </entry>
  <entry>
    <title>Spring 的事务传播性</title>
    <url>/2020/03/04/ring-%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%80%A7/</url>
    <content><![CDATA[<h3 id="spring-的事务传播性"><a href="#spring-的事务传播性" class="headerlink" title="spring 的事务传播性"></a>spring 的事务传播性</h3><table>
<thead>
<tr>
<th>常量名称</th>
<th>常量解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>PROPAGATION_REQUIRED</td>
<td>spring中的默认事务传播机制。支持当前事务，如果当前没有事务，就新建一个事务。</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>新建事务，如果当前存在事务，则将当前事务挂起。新建的事务和被挂起的事务没有关联，是两个独立的事务，外层事务失败回滚后，不会影响到内层的事务。内层事务失败抛出异常后，外层事务捕获，也可以不处理回滚操作。</td>
</tr>
<tr>
<td>PROPAGITION_SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式运行</td>
</tr>
<tr>
<td>PROPAGITION_MANDATORY</td>
<td>支持当前事务，如果当前没有事务，则抛出异常。</td>
</tr>
<tr>
<td>PROPAGITION_NOT_SUPPORTED</td>
<td>以非事务方式运行，如果当前存在事务，则将当前事务挂起</td>
</tr>
<tr>
<td>PROPAGITION_NEVER</td>
<td>以非事务方式运行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>PROPAGITION_NESTED</td>
<td>如果一个活动事务存在，则运行在一个嵌套事务中。如果没有活动事务，则按REQUIRED运行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事物造成影响。他只对DataSourceTransationManager事务管理器起效。</td>
</tr>
</tbody>
</table>
<p><code>REQUIRED</code> 和 <code>REQUIRES_NEW</code> : 两个方法必须在不同的类中才会生效，才会创建新的事务。否则只会创建一个。    </p>
]]></content>
  </entry>
  <entry>
    <title>乐观锁和悲观锁</title>
    <url>/2020/03/04/%E6%B5%93%E7%BC%A9%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
    <content><![CDATA[<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>认为同一时间访问共享资源的线程不会冲突，所以采用共享资源的状态对资源进行修改。CAS操作也是乐观锁的体现。适合读多写少的操作。效率较高。</p>
<p>乐观锁的实现方式：</p>
<p>1、使用version方式，版本号控制对数据的操作</p>
<p>2、JDK的CAS操作就是乐观锁的一种实现。但是CAS可能会出现“ABA”的问题。</p>
<h4 id="“ABA”问题："><a href="#“ABA”问题：" class="headerlink" title="“ABA”问题："></a>“ABA”问题：</h4><p>CAS操作表示<code>compareAndSet</code>,提供了三个参数，旧值V，预期值E，更新值U，当V和E相等时，才会对数据进行操作。但是操作时可能出现了其他线程对数据操作的情况：<code>A --&gt; B --&gt;A</code>，其他线程将数据改为B后又改回成A。所以前面的线程会对数据操作成功。类似于数据库的<code>脏读</code>问题 。</p>
<h4 id="如何解决“ABA”问题"><a href="#如何解决“ABA”问题" class="headerlink" title="如何解决“ABA”问题"></a>如何解决“ABA”问题</h4><p>采用<code>version</code>版本号控制，操作一次版本号<code>version</code>增加<code>1</code>，后续操作时带上参数<code>version</code>。版本号一直才会对数据操作。</p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>认为同一时间一定会有多个线程访问同一静态资源，所以采用对共享资源加锁的方式保证数据的安全性，如数据库操作的for update操作。</p>
]]></content>
  </entry>
  <entry>
    <title>java中的类加载顺序</title>
    <url>/2020/03/01/ava%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo singletonDemo = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"count1:"</span> + count1);<span class="comment">// 1</span></span><br><span class="line">        System.out.println(<span class="string">"count2:"</span> + count2);<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"count1:"</span> + count1);<span class="comment">// 3</span></span><br><span class="line">        System.out.println(<span class="string">"count2:"</span> + count2);<span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>类的加载过程为：转载 – 链接 – 初始化</p>
<ul>
<li>装载：根据类全路径进行加载</li>
<li>链接包含三个步骤：验证 - 准备 - 解析。<ul>
<li>验证：<ul>
<li>文件格式验证</li>
<li>元数据验证</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ul>
</li>
<li>准备：为类的静态变量分配内存，并将其初始化为默认值。</li>
<li>解析：把类中的符号引用转换为直接引用</li>
</ul>
</li>
</ul>
<p>初始化阶段会初始化类中的：</p>
<ul>
<li>静态成员变量<code>singletonDemo</code>，初始化时，<code>count1</code>和<code>count2</code>默认为0，初始化后<code>count1</code>和<code>count2</code>都是1，所以1和2位置输出均为1。</li>
<li>静态变量<code>count1</code>和<code>count2</code>，初始化前<code>count1</code>和<code>count2</code>都是1，初始化后<code>count2</code>被赋值为0。所以3和4的位置输出1,0</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>交换两个integer的值</title>
    <url>/2020/03/01/%E4%B8%A4%E4%B8%AAinteger%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<p>核心思想：通过反射设置integer的<code>value</code>属性。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">1</span>;</span><br><span class="line">        Integer i2 = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"before:"</span> + <span class="string">"i1:"</span> + i1+  <span class="string">"- i2:"</span> + i2) ;</span><br><span class="line">        swap(i1,i2);</span><br><span class="line">        System.out.println(<span class="string">"after:"</span> + <span class="string">"i1:"</span> + i1+  <span class="string">"- i2:"</span> + i2) ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Integer(<span class="number">1</span>) == i1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer i1,Integer i2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">int</span> tmp = i1.intValue();</span><br><span class="line">            field.setInt(i1,i2);</span><br><span class="line">            field.setInt(i2,tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>java对象的强引用、软引用、弱引用、虚引用</title>
    <url>/2020/03/01/ava%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>强引用在对象不被使用时，并且也发生了gc，但是也不会被回收，直到发生oom</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 强引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">strongRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object strongObj = obj;</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">    System.out.println(strongObj);</span><br><span class="line">&#125;</span><br><span class="line">java.lang.Object@<span class="number">677327</span>b6</span><br></pre></td></tr></table></figure>
<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用在即将发生OOM时，会对没有使用的对象回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 软引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">softRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object softObj = <span class="keyword">new</span> Object();</span><br><span class="line">    SoftReference softReference = <span class="keyword">new</span> SoftReference(softObj);</span><br><span class="line">    softObj = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">    System.out.println(softReference.get());</span><br><span class="line">&#125;</span><br><span class="line">java.lang.Object@<span class="number">677327</span>b6</span><br></pre></td></tr></table></figure>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>发生GC时，就会对没有使用的对象进行回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弱引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">weakRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object weakObj = <span class="keyword">new</span> Object();</span><br><span class="line">    WeakReference weakReference = <span class="keyword">new</span> WeakReference(weakObj);</span><br><span class="line">    weakObj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.gc();;</span><br><span class="line">    System.out.println(weakReference.get());</span><br><span class="line">&#125;</span><br><span class="line">java.lang.Object@<span class="number">677327</span>b6</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用不管在使用时还是未使用时直接取值都会是null，但是对象未被使用时(=null)会将对象放入到queue中。如果对象还在使用，则不放入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phantomRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    ReferenceQueue queue = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line">    PhantomReference phantomReference = <span class="keyword">new</span> PhantomReference(o, queue);</span><br><span class="line">    o = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">    System.out.println(phantomReference.get());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">java.lang.ref.PhantomReference@<span class="number">677327</span>b6</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>数组int[] 转换为Integer[]</title>
    <url>/2020/03/01/int-%E8%BD%AC%E6%8D%A2%E4%B8%BAInteger/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">Integer[] integers = Arrays.stream(a).boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(integers));</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>vps</title>
    <url>/2020/02/27/ps/</url>
    <content><![CDATA[<h3 id="下载get-pip-py"><a href="#下载get-pip-py" class="headerlink" title="下载get-pip.py"></a>下载get-pip.py</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br></pre></td></tr></table></figure>
<h3 id="执行get-pip-py"><a href="#执行get-pip-py" class="headerlink" title="执行get-pip.py"></a>执行get-pip.py</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>
<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">2018</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动shadowsocks"><a href="#启动shadowsocks" class="headerlink" title="启动shadowsocks"></a>启动shadowsocks</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<h3 id="关闭shadowsocks"><a href="#关闭shadowsocks" class="headerlink" title="关闭shadowsocks"></a>关闭shadowsocks</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/02/25/out-Me/</url>
    <content><![CDATA[<blockquote>
<p>   A Java Coder, live in BeiJing, China.<br>GitHub:<a href="https://github.com/LBraveHeart">BraveHeart</a><br>QQ:318635503</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>idea快捷键使用</title>
    <url>/2019/12/31/dea%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="自动代码"><a href="#自动代码" class="headerlink" title="自动代码"></a>自动代码</h2><p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码 。</p>
<p>例如：要输入<code>for(User user : users)</code>只需输入<code>user.for+Tab;</code></p>
<p>再比如：要输入<code>Date birthday = user.getBirthday()</code>只需输入<code>user.getBirthday().var+Tab</code>即可。</p>
<p>代码标签输入完成后，按Tab，生成代码。</p>
<ol>
<li>Ctrl+Alt+O 优化导入的类和包 </li>
<li>Alt+Insert 生成代码(如get,set方法,构造函数等)   或者右键（Generate） </li>
<li>fori/sout/psvm + Tab  </li>
<li>Ctrl+Alt+T  生成try catch  或者 Alt+enter </li>
<li>CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{} 里 </li>
<li>Ctrl + O 重写方法  </li>
<li>Ctrl + I 实现方法 </li>
<li>Ctr+shift+U 大小写转化  </li>
<li>ALT+回车    导入包,自动修正  </li>
<li>ALT+/       代码提示 </li>
<li>CTRL+J      自动代码  </li>
<li>Ctrl+Shift+J，整合两行为一行 </li>
<li>CTRL+空格   代码提示  </li>
<li>CTRL+SHIFT+SPACE 自动补全代码  </li>
<li>CTRL+ALT+L  格式化代码  </li>
<li>CTRL+ALT+I  自动缩进  </li>
<li>CTRL+ALT+O  优化导入的类和包  </li>
<li>ALT+INSERT  生成代码(如GET,SET方法,构造函数等)  </li>
<li>CTRL+E      最近更改的代码  </li>
<li>CTRL+ALT+SPACE  类名或接口名提示  </li>
<li>CTRL+P   方法参数提示  </li>
<li>CTRL+Q，可以看到当前方法的声明 </li>
<li>Shift+F6  重构-重命名 (包、类、方法、变量、甚至注释等) </li>
<li>Ctrl+Alt+V 提取变量 </li>
</ol>
<h3 id="查询快捷键"><a href="#查询快捷键" class="headerlink" title="查询快捷键"></a>查询快捷键</h3><p>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地<br>CTRL+ALT+ left/right 前后导航编辑过的地方<br>ALT+7  靠左窗口显示当前文件的结构<br>Ctrl+F12 浮动显示当前文件的结构<br>ALT+F7 找到你的函数或者变量或者类的所有引用到的地方<br>CTRL+ALT+F7  找到你的函数或者变量或者类的所有引用到的地方<br>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>双击SHIFT 在项目的所有目录查找文件<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>CTRL+G   定位行<br>CTRL+F   在当前窗口查找文本<br>CTRL+SHIFT+F  在指定窗口查找文本<br>CTRL+R   在 当前窗口替换文本<br>CTRL+SHIFT+R  在指定窗口替换文本<br>ALT+SHIFT+C  查找修改的文件<br>CTRL+E   最近打开的文件<br>F3   向下查找关键字出现位置<br>SHIFT+F3  向上一个关键字出现位置<br>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本<br>F4   查找变量来源<br>CTRL+SHIFT+O  弹出显示查找内容<br>Ctrl+W 选中代码，连续按会有其他效果<br>F2 或Shift+F2 高亮错误或警告快速定位<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下<br>Ctrl+B 快速打开光标处的类或方法<br>CTRL+ALT+B  找所有的子类<br>CTRL+SHIFT+B  找变量的类<br>Ctrl+Shift+上下键  上下移动代码<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板<br>Alt+ left/right 切换代码视图<br>ALT+ ↑/↓  在方法间快速移动定位<br>CTRL+ALT+ left/right 前后导航编辑过的地方<br>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地<br>Alt+6    查找TODO </p>
<h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><p>SHIFT+ENTER 另起一行<br>CTRL+Z   倒退(撤销)<br>CTRL+SHIFT+Z  向前(取消撤销)<br>CTRL+ALT+F12  资源管理器打开文件夹<br>ALT+F1   查找文件所在目录位置<br>SHIFT+ALT+INSERT 竖编辑模式<br>CTRL+F4  关闭当前窗口<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单） </p>
<h3 id="svn快捷键"><a href="#svn快捷键" class="headerlink" title="svn快捷键"></a>svn快捷键</h3><p>ctrl+k 提交代码到SVN<br>ctrl+t 更新代码 </p>
<h3 id="调试快捷键"><a href="#调试快捷键" class="headerlink" title="调试快捷键"></a>调试快捷键</h3><p>其实常用的 就是F8 F7 F9 最值得一提的就是Drop Frame 可以让运行过的代码从头再来。</p>
<p>alt+F8    debug时选中查看值<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F8，查看断点<br>F7，步入<br>Shift+F7，智能步入<br>Alt+Shift+F7，强制步入<br>F8，步过<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点 </p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联 </p>
<h2 id="十大Intellij-IDEA快捷键"><a href="#十大Intellij-IDEA快捷键" class="headerlink" title="十大Intellij IDEA快捷键"></a>十大Intellij IDEA快捷键</h2><p>Intellij IDEA中有很多快捷键让人爱不释手，stackoverflow上也有一些有趣的讨论。每个人都有自己的最爱，想排出个理想的榜单还真是困难。 </p>
<p>以前也整理过Intellij的快捷键，这次就按照我日常开发时的使用频率，简单分类列一下我最喜欢的十大快捷-神-键吧。 </p>
<h3 id="1-智能提示"><a href="#1-智能提示" class="headerlink" title="1 智能提示:"></a>1 智能提示:</h3><p>Intellij首当其冲的当然就是Intelligence智能！基本的代码提示用Ctrl+Space，还有更智能地按类型信息提示Ctrl+Shift+Space，但因为Intellij总是随着我们敲击而自动提示，所以很多时候都不会手动敲这两个快捷键(除非提示框消失了)。</p>
<p>用F2/ Shift+F2移动到有错误的代码，Alt+Enter快速修复(即Eclipse中的Quick Fix功能)。当智能提示为我们自动补全方法名时，我们通常要自己补上行尾的反括号和分号，当括号嵌套很多层时会很麻烦，这时我们只需敲Ctrl+Shift+Enter就能自动补全末尾的字符。而且不只是括号，例如敲完if/for时也可以自动补上{}花括号。 </p>
<p>最后要说一点，Intellij能够智能感知Spring、Hibernate等主流框架的配置文件和类，以静制动，在看似“静态”的外表下，智能地扫描理解你的项目是如何构造和配置的。 </p>
<h3 id="2-重构"><a href="#2-重构" class="headerlink" title="2 重构:"></a>2 重构:</h3><p>Intellij重构是另一完爆Eclipse的功能，其智能程度令人瞠目结舌，比如提取变量时自动检查到所有匹配同时提取成一个变量等。尤其看过《重构-改善既有代码设计》之后，有了Intellij的配合简直是令人大呼过瘾！也正是强大的智能和重构功能，使Intellij下的TDD开发非常顺畅。</p>
<p>切入正题，先说一个无敌的重构功能大汇总快捷键Ctrl+Shift+Alt+T，叫做Refactor This。按法有点复杂，但也符合Intellij的风格，很多快捷键都要双手完成，而不像Eclipse不少最有用的快捷键可以潇洒地单手完成(不知道算不算Eclipse的一大优点)，但各位用过Emacs的话就会觉得也没什么了(非Emacs黑)。</p>
<p>此外，还有些最常用的重构技巧，因为太常用了，若每次都在Refactor This菜单里选的话效率有些低。比如Shift+F6直接就是改名，Ctrl+Alt+V则是提取变量。关注Java技术栈微信公众号，在后台回复关键字：IDEA，可以获取一份栈长整理的 IDEA 最新技术干货。 </p>
<h3 id="3-代码生成"><a href="#3-代码生成" class="headerlink" title="3 代码生成:"></a>3 代码生成:</h3><p>这一点类似Eclipse，虽不是独到之处，但因为日常使用频率极高，所以还是罗列在榜单前面。常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码，用Ctrl+J可以查看所有模板。</p>
<p>后面“辅助”一节中将会讲到Alt+Insert，在编辑窗口中点击可以生成构造函数、toString、getter/setter、重写父类方法等。这两个技巧实在太常用了，几乎每天都要生成一堆main、System.out和getter/setter。 </p>
<p>另外，Intellij IDEA 13中加入了后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。例如要输入for(User user : users)只需输入user.for+Tab。再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。 </p>
<h3 id="4-编辑："><a href="#4-编辑：" class="headerlink" title="4 编辑："></a>4 编辑：</h3><p>编辑中不得不说的一大神键就是能够自动按语法选中代码的Ctrl+W以及反向的Ctrl+Shift+W了。此外，Ctrl+Left/Right移动光标到前/后单词，Ctrl+[/]移动到前/后代码块，这些类Vim风格的光标移动也是一大亮点。以上Ctrl+Left/Right/[]加上Shift的话就能选中跳跃范围内的代码。Alt+Forward/Backward移动到前/后方法。还有些非常普通的像Ctrl+Y删除行、Ctrl+D复制行、Ctrl+折叠代码就不多说了。 </p>
<p>关于光标移动再多扩展一点，除了Intellij本身已提供的功能外，我们还可以安装ideaVim或者emacsIDEAs享受到Vim的快速移动和Emacs的AceJump功能(超爽！)。</p>
<p>另外，Intellij的书签功能也是不错的，用Ctrl+Shift+Num定义1-10书签(再次按这组快捷键则是删除书签)，然后通过Ctrl+Num跳转。这避免了多次使用前/下一编辑位置Ctrl+Left/Right来回跳转的麻烦，而且此快捷键默认与Windows热键冲突(默认多了Alt，与Windows改变显示器显示方向冲突，一不小心显示器就变成倒着显式的了，冏啊)。 </p>
<h3 id="5-查找打开："><a href="#5-查找打开：" class="headerlink" title="5 查找打开："></a>5 查找打开：</h3><p>类似Eclipse，Intellij的Ctrl+N/Ctrl+Shift+N可以打开类或资源，但Intellij更加智能一些，我们输入的任何字符都将看作模糊匹配，省却了Eclipse中还有输入*的麻烦。最新版本的IDEA还加入了Search Everywhere功能，只需按Shift+Shift即可在一个弹出框中搜索任何东西，包括类、资源、配置项、方法等等。 </p>
<p>类的继承关系则可用Ctrl+H打开类层次窗口，在继承层次上跳转则用Ctrl+B/Ctrl+Alt+B分别对应父类或父方法定义和子类或子方法实现，查看当前类的所有方法用Ctrl+F12。 </p>
<p>要找类或方法的使用也很简单，Alt+F7。要查找文本的出现位置就用Ctrl+F/Ctrl+Shift+F在当前窗口或全工程中查找，再配合F3/Shift+F3前后移动到下一匹配处。 </p>
<p>Intellij更加智能的又一佐证是在任意菜单或显示窗口，都可以直接输入你要找的单词，Intellij就会自动为你过滤。 关注Java技术栈微信公众号，在后台回复关键字：IDEA，可以获取一份栈长整理的 IDEA 最新技术干货。 </p>
<h3 id="6-其他辅助："><a href="#6-其他辅助：" class="headerlink" title="6 其他辅助："></a>6 其他辅助：</h3><p>以上这些神键配上一些辅助快捷键，即可让你的双手90%以上的时间摆脱鼠标，专注于键盘仿佛在进行钢琴表演。这些不起眼却是至关重要的最后一块拼图有：</p>
<p>Ø  命令：Ctrl+Shift+A可以查找所有Intellij的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具。 </p>
<p>Ø  新建：Alt+Insert可以新建类、方法等任何东西。 </p>
<p>Ø  格式化代码：格式化import列表Ctrl+Alt+O，格式化代码Ctrl+Alt+L。 </p>
<p>Ø  切换窗口：Alt+Num，常用的有1-项目结构，3-搜索结果，4/5-运行调试。Ctrl+Tab切换标签页，Ctrl+E/Ctrl+Shift+E打开最近打开过的或编辑过的文件。 </p>
<p>Ø  单元测试：Ctrl+Alt+T创建单元测试用例。 </p>
<p>Ø  运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。 </p>
<p>Ø  调试：F7/F8/F9分别对应Step into，Step over，Continue。 </p>
<p>此外还有些我自定义的，例如水平分屏Ctrl+|等，和一些神奇的小功能Ctrl+Shift+V粘贴很早以前拷贝过的，Alt+Shift+Insert进入到列模式进行按列选中。 </p>
<p>Ø  Top #10切来切去：Ctrl+Tab</p>
<p>Ø  Top #9选你所想：Ctrl+W</p>
<p>Ø  Top #8代码生成：Template/Postfix +Tab</p>
<p>Ø  Top #7发号施令：Ctrl+Shift+A</p>
<p>Ø  Top #6无处藏身：Shift+Shift</p>
<p>Ø  Top #5自动完成：Ctrl+Shift+Enter</p>
<p>Ø  Top #4创造万物：Alt+Insert</p>
<p>太难割舍，前三名并列吧！ </p>
<p>Ø  Top #1智能补全：Ctrl+Shift+Space</p>
<p>Ø  Top #1自我修复：Alt+Enter</p>
<p>Ø  Top #1重构一切：Ctrl+Shift+Alt+T</p>
<p>CTRL+ALT+ left/right 前后导航编辑过的地方<br>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p>
]]></content>
  </entry>
  <entry>
    <title>centos7 配置jdk</title>
    <url>/2019/12/30/ntos7-%E9%85%8D%E7%BD%AEjdk/</url>
    <content><![CDATA[<h1 id="下载jdk压缩包"><a href="#下载jdk压缩包" class="headerlink" title="下载jdk压缩包"></a>下载jdk压缩包</h1><p>链接：<a href="https://pan.baidu.com/s/1As4LjS8FrunJhkP16B9Xdg" target="_blank" rel="noopener">https://pan.baidu.com/s/1As4LjS8FrunJhkP16B9Xdg</a><br>提取码：79es<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<h1 id="将jdk压缩包上传至centos7中"><a href="#将jdk压缩包上传至centos7中" class="headerlink" title="将jdk压缩包上传至centos7中"></a>将jdk压缩包上传至centos7中</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<h1 id="解压jdk压缩包"><a href="#解压jdk压缩包" class="headerlink" title="解压jdk压缩包"></a>解压jdk压缩包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>将下面的代码复制到最后：<br>将第一行中路径修改为解压后的jdk目录位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk/jdk1.8.0_231</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">exportCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>idea创建maven很慢时，设置属性</title>
    <url>/2019/12/26/ea%E5%88%9B%E5%BB%BAmaven%E5%BE%88%E6%85%A2%E6%97%B6%EF%BC%8C%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-DarchetypeCatalog=internal</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>centos 7安装redis</title>
    <url>/2019/12/18/entos-7%E5%AE%89%E8%A3%85redis/</url>
    <content><![CDATA[<h1 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-5.0.7</span><br></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.7</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h2 id="编译可能出现的问题"><a href="#编译可能出现的问题" class="headerlink" title="编译可能出现的问题"></a>编译可能出现的问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make[1]: [persist-settings] Error 2 (ignored)</span><br><span class="line">    CC adlist.o</span><br><span class="line"></span><br><span class="line">出现该问题时：错误是因为一些依赖包未安装</span><br><span class="line">yum -y install gcc gcc-c++ libstdc++-devel   解决</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zmalloc.h:50:31: fatal error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line"> #include &lt;jemalloc/jemalloc.h&gt;</span><br><span class="line"> </span><br><span class="line"> 出现该问题时：make MALLOC=libc  解决</span><br></pre></td></tr></table></figure>
<h2 id="redis设置登录密码"><a href="#redis设置登录密码" class="headerlink" title="redis设置登录密码"></a>redis设置登录密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在redis.conf 配置文件添加`requirepass`属性保存</span><br></pre></td></tr></table></figure>
<h2 id="redis设置后台启动"><a href="#redis设置后台启动" class="headerlink" title="redis设置后台启动"></a>redis设置后台启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在redis.conf 配置文件设置`daemonize yes`属性保存</span><br></pre></td></tr></table></figure>
<h1 id="使用docker-compose安装redis"><a href="#使用docker-compose安装redis" class="headerlink" title="使用docker-compose安装redis"></a>使用docker-compose安装redis</h1><h2 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:5.0.5</span></span><br><span class="line"><span class="attr">      container_name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">redis-server</span> <span class="bullet">--requirepass</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"16379:6379"</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure>
<h2 id="启动docker-compose"><a href="#启动docker-compose" class="headerlink" title="启动docker-compose"></a>启动docker-compose</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="使用redis命令行客户端"><a href="#使用redis命令行客户端" class="headerlink" title="使用redis命令行客户端"></a>使用redis命令行客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先查看redis的容器id</span><br><span class="line">docker ps </span><br><span class="line">进入redis容器</span><br><span class="line">docker exec -it 1742ad5e9da8 bash</span><br><span class="line">启动redis客户端</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a 123456</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>linux统计文件夹信息</title>
    <url>/2019/11/21/inux%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="查看当前文件夹所有文件的个数-不包括文件夹"><a href="#查看当前文件夹所有文件的个数-不包括文件夹" class="headerlink" title="查看当前文件夹所有文件的个数(不包括文件夹)"></a>查看当前文件夹所有文件的个数(不包括文件夹)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l |grep &quot;^-&quot;|wc -l</span><br></pre></td></tr></table></figure>
<h2 id="查看当前文件夹所有目录的个数"><a href="#查看当前文件夹所有目录的个数" class="headerlink" title="查看当前文件夹所有目录的个数"></a>查看当前文件夹所有目录的个数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l |grep &quot;^ｄ&quot;|wc -l</span><br></pre></td></tr></table></figure>
<h2 id="查看当前文件夹所有文件个数-包括子目录"><a href="#查看当前文件夹所有文件个数-包括子目录" class="headerlink" title="查看当前文件夹所有文件个数(包括子目录)"></a>查看当前文件夹所有文件个数(包括子目录)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lR|grep &quot;^-&quot;|wc -l</span><br></pre></td></tr></table></figure>
<h2 id="查看当前文件夹下所有目录的个数-包含子目录"><a href="#查看当前文件夹下所有目录的个数-包含子目录" class="headerlink" title="查看当前文件夹下所有目录的个数(包含子目录)"></a>查看当前文件夹下所有目录的个数(包含子目录)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lR|grep &quot;^d&quot;|wc -l</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>centos7 mysql的安装及初始化配置</title>
    <url>/2019/11/19/ntos7-mysql%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2/</url>
    <content><![CDATA[<h1 id="普通方法安装"><a href="#普通方法安装" class="headerlink" title="普通方法安装"></a>普通方法安装</h1><h2 id="安装YUM-Repo"><a href="#安装YUM-Repo" class="headerlink" title="安装YUM Repo"></a>安装YUM Repo</h2><p><strong>由于CentOS 的yum源中没有mysql，需要到mysql的官网下载yum repo配置文件。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>
<p><strong>然后进行repo的安装：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure></p>
<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>
<h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p><strong>获取安装时的临时密码：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></p>
<p><strong>倘若没有</strong></p>
<ul>
<li><p>（1）删除原来安装过的mysql残留的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>（2）再启动mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p><strong>登录成功后需要先修改密码：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</span><br></pre></td></tr></table></figure></p>
<p>在设置密码时，但密码在简单时会出现<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>的错误<br>设置参数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure></p>
<p>这时再设置密码就不错报错了。</p>
<h2 id="修改登录权限"><a href="#修改登录权限" class="headerlink" title="修改登录权限"></a>修改登录权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br><span class="line">FLUSH  PRIVILEGES;</span><br></pre></td></tr></table></figure>
<h2 id="查看mysql运行状态"><a href="#查看mysql运行状态" class="headerlink" title="查看mysql运行状态"></a>查看mysql运行状态</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service mysqld status</span><br></pre></td></tr></table></figure>
<h2 id="停止mysql"><a href="#停止mysql" class="headerlink" title="停止mysql"></a>停止mysql</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure>
<h1 id="使用docker-compsoe安装"><a href="#使用docker-compsoe安装" class="headerlink" title="使用docker-compsoe安装"></a>使用docker-compsoe安装</h1><h2 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'mysql/mysql-server:5.7'</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mysql57</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">用户名</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">密码</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">初始创建的数据库</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">root用户密码</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'3306:3306'</span><span class="string">//映射端口</span></span><br></pre></td></tr></table></figure>
<h2 id="启动docker-compsoe"><a href="#启动docker-compsoe" class="headerlink" title="启动docker-compsoe"></a>启动docker-compsoe</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动docker-compose(后台模式，不打印日志)</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="进入容器创建用户"><a href="#进入容器创建用户" class="headerlink" title="进入容器创建用户"></a>进入容器创建用户</h2><h3 id="进入docker中的mysql容器"><a href="#进入docker中的mysql容器" class="headerlink" title="进入docker中的mysql容器"></a>进入docker中的mysql容器</h3><p><strong>查看mysql容器的id</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p>
<p><strong>进入docker容器命令行</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql容器id bash</span><br></pre></td></tr></table></figure></p>
<p><strong>进入mysql命令行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p><strong>可以使用docker配置文件中创建的用户也可以创建新用户</strong></p>
<p><strong>创建新用户:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &apos;admin001&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure></p>
<p><strong>删除用户：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP USER &apos;admin001&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure></p>
<p><strong>给用户赋权限：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;admin001&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>vagrant+virtualBox搭建centos7虚拟机</title>
    <url>/2019/11/18/agrant-virtualBox%E6%90%AD%E5%BB%BAcentos7%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>linux查看端口占用</title>
    <url>/2019/10/23/inux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:端口</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>centos7关闭防火墙</title>
    <url>/2019/10/22/ntos7%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>判断一个数是否为NaN</title>
    <url>/2019/10/10/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%98%AF%E5%90%A6%E4%B8%BANaN/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Double.isNaN(d)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>js滚动到指定位置</title>
    <url>/2019/09/17/%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">".html"</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="string">'0px'</span>&#125;, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql去重语句</title>
    <url>/2019/07/30/sql%E5%8E%BB%E9%99%A4%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(u.userId) <span class="keyword">FROM</span> <span class="string">`user`</span> u <span class="keyword">where</span> u.status=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>idea去除重复代码检测</title>
    <url>/2019/07/26/ea%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h2><p><img src="\images\pasted-6.png" alt></p>
<p>将红框部分去选勾选</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>excel导出poi处理及table转为excel</title>
    <url>/2019/07/26/xcel%E5%AF%BC%E5%87%BApoi%E5%A4%84%E7%90%86%E5%8F%8Atable%E8%BD%AC%E4%B8%BAexcel/</url>
    <content><![CDATA[<h2 id="poi导出"><a href="#poi导出" class="headerlink" title="poi导出"></a>poi导出</h2><p>使用poi导出大量数据时，可以使用 <strong>SXSSFWorkbook</strong></p>
<h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ol>
<li>导入poi包及poi-ooxml包</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>具体代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuyy.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Font;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> PoiExcelDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/26 16:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoiExcelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exportExcel(<span class="string">"数据导出.xls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        SXSSFWorkbook workbook = <span class="keyword">new</span> SXSSFWorkbook();</span><br><span class="line">        <span class="comment">//输出Excel文件</span></span><br><span class="line">        FileOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//添加Worksheet（不添加sheet时生成的xls文件打开时会报错)</span></span><br><span class="line">            String sheetName = <span class="string">"数据导出"</span>;</span><br><span class="line">            SXSSFSheet sheet = workbook.createSheet(sheetName);</span><br><span class="line">            <span class="comment">// 设置缺省列高</span></span><br><span class="line">            sheet.setDefaultRowHeightInPoints(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 设置缺省列宽</span></span><br><span class="line">            sheet.setDefaultColumnWidth(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 设置字体</span></span><br><span class="line">            Font fontStyle = workbook.createFont();</span><br><span class="line">            fontStyle.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">            fontStyle.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 创建XSSFRow对象</span></span><br><span class="line">            <span class="comment">// 创建第一行-表头</span></span><br><span class="line">            SXSSFRow rowHead = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//创建XSSFCell对象</span></span><br><span class="line">                SXSSFCell cellHead = rowHead.createCell(i);</span><br><span class="line">                <span class="comment">//设置单元格的值</span></span><br><span class="line">                cellHead.setCellValue(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建具体数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 第i+1行</span></span><br><span class="line">                SXSSFRow row = sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                row.createCell(<span class="number">0</span>).setCellValue(<span class="string">"第1列"</span>);</span><br><span class="line">                row.createCell(<span class="number">1</span>).setCellValue(<span class="string">"第2列"</span>);</span><br><span class="line">                row.createCell(<span class="number">2</span>).setCellValue(<span class="string">"第3列"</span>);</span><br><span class="line">                row.createCell(<span class="number">3</span>).setCellValue(<span class="string">"第4列"</span>);</span><br><span class="line">                row.createCell(<span class="number">4</span>).setCellValue(<span class="string">"第5列"</span>);</span><br><span class="line">                row.createCell(<span class="number">5</span>).setCellValue(<span class="string">"第6列"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            output = <span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">            workbook.write(output);</span><br><span class="line">            output.flush();</span><br><span class="line">            workbook.close();</span><br><span class="line">            output.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                workbook.close();</span><br><span class="line">                output.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>结果如果所示：</p>
<img src="/2019/07/26/xcel导出poi处理及table转为excel/pasted-5.png" title="excel">
</li>
</ol>
<h2 id="table导出"><a href="#table导出" class="headerlink" title="table导出"></a>table导出</h2><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取表格</span></span><br><span class="line"><span class="keyword">var</span> exportFileContent = <span class="built_in">document</span>.getElementById(<span class="string">"showTable"</span>).outerHTML;</span><br><span class="line"><span class="comment">//设置格式为Excel，表格内容通过btoa转化为base64，此方法只在文件较小时使用(小于1M)</span></span><br><span class="line"><span class="comment">//exportFileContent = window.btoa(unescape(encodeURIComponent(exportFileContent)));</span></span><br><span class="line"><span class="comment">//var link = "data:"+MIMEType+";base64," + exportFileContent;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Blob</span></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([exportFileContent], &#123;<span class="attr">type</span>: <span class="string">"text/plain;charset=utf-8"</span>&#125;);</span><br><span class="line"><span class="comment">//解决中文乱码问题</span></span><br><span class="line">blob =  <span class="keyword">new</span> Blob([<span class="built_in">String</span>.fromCharCode(<span class="number">0xFEFF</span>), blob], &#123;<span class="attr">type</span>: blob.type&#125;);</span><br><span class="line"><span class="comment">//设置链接</span></span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);    <span class="comment">//创建a标签</span></span><br><span class="line">a.download = filenName+<span class="string">".xls"</span>;                <span class="comment">//设置被下载的超链接目标（文件名）</span></span><br><span class="line">a.href = link;                            <span class="comment">//设置a标签的链接</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a);            <span class="comment">//a标签添加到页面</span></span><br><span class="line">a.click();                                <span class="comment">//设置a标签触发单击事件</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(a);            <span class="comment">//移除a标签</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>excel</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer.MAX_VALUE 面试题</title>
    <url>/2019/07/18/nteger-MAX-VALUE-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="如下代码："><a href="#如下代码：" class="headerlink" title="如下代码："></a>如下代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> start = Integer.MAX_VALUE-<span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> end = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end;i++) &#123;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>
<p><img src="../images/pasted-4.png" alt="idea调试"></p>
<h2 id="输出结果为？"><a href="#输出结果为？" class="headerlink" title="输出结果为？"></a>输出结果为？</h2><p><strong>没有输出结果</strong></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>Integer.MAX_VALUE</code>用二进制表示1111 1111 1111 1111 1111 1111 1111 111</p>
<p>所以当i++一直到=end时，即<code>i = Integer.MAX_VALUE</code>时,此时计算的结果为100，但是当接着往下面执行时，i++即 <code>i = Integer.MAX_VALUE+1</code>，i此时二进制1111 1111 1111 1111 1111 1111 1111 111 + 1 的结果为-1000 0000 0000 0000 0000 0000 0000 0000，即i = -2147483648，符合 <code>i &lt; end</code>条件，所以循环接着往下执行，一直到=end，+1后又变为负数，周而复始，所以不会有结果输出。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>short/int 易错面试题</title>
    <url>/2019/07/18/ort-int-%E5%87%BA%E4%BA%BA%E6%84%8F%E6%96%99%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;Short&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// set.add set添加的类型为short</span></span><br><span class="line">    set.add(i);</span><br><span class="line">    <span class="comment">// 通过计算得知 int i1 = i - 1,i-1返回的是一个int类型的值，所以remove时找不到需要remove的值</span></span><br><span class="line">    set.remove(i-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从而size是100</span></span><br><span class="line">System.out.println(set.size());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>远程通讯协议-tcp/ip及nio的学习笔记</title>
    <url>/2019/07/17/%E7%A8%8B%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE-tcp-ip%E5%8F%8Anio%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="tcp-7层"><a href="#tcp-7层" class="headerlink" title="tcp 7层"></a>tcp 7层</h2><ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>4层网络模型：</p>
<p>其中应用层、表示层、会话层表示应用层，数据链路层、物理层表示网络接口层</p>
<h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>复杂的程序都需要分层，软件开发设计必须要做的</p>
<h2 id="tcp负载均衡"><a href="#tcp负载均衡" class="headerlink" title="tcp负载均衡"></a>tcp负载均衡</h2><p>二层负载 -&gt; mac地址，vip(虚拟ip) 多个机器IP相同但是mac地址不同</p>
<p>三层负载 -&gt;ip 对外提供虚拟ip，集群中不同机器采用不用的ip，IP请求转发</p>
<p>四层负载 -&gt; 传输层负载，包含ip和端口，修改目标ip和端口地址</p>
<p>七层负载 -&gt; 应用层负载，请求的url，http请求的报文，如<a href="http://a/a.html,主机名。" target="_blank" rel="noopener">http://a/a.html,主机名。</a></p>
<h2 id="tcp和udp区别"><a href="#tcp和udp区别" class="headerlink" title="tcp和udp区别"></a>tcp和udp区别</h2><p>TCP/IP：可靠</p>
<ol>
<li>建立连接机制</li>
<li>三次握手建立连接<ol>
<li>client发送请求连接的数据包</li>
<li>server返回可以进行连接的数据包</li>
<li>client发送确认请求连接的数据包</li>
<li>client/server可以进行数据传输了</li>
</ol>
</li>
<li>SYNC攻击 -&gt; 客户端伪造大量ip和mac地址发送消息给服务器，占用服务器大量资源</li>
<li>连接的关闭，四次挥手协议<ol>
<li>client发送请求关闭连接的数据包</li>
<li>server返回确认收到请求关闭的数据包-此时server可能还处于数据操作的状况</li>
<li>server数据已经处理完毕，并返回可以关闭的数据包</li>
<li>client返回最终请求关闭数据包-此时server接收到数据包以后将处于关闭状态,而client可能还处于数据为未接受完的状态，等待2个固定的时间点后进入关闭状态</li>
</ol>
</li>
<li>TCP是一种全双工的协议</li>
<li>长连接，正常连接是超时关闭，但是长连接可以发送心跳包维持连接</li>
</ol>
<p>UDP/IP：不可靠</p>
<h2 id="在应用中如何去构建一个传输的实例"><a href="#在应用中如何去构建一个传输的实例" class="headerlink" title="在应用中如何去构建一个传输的实例"></a>在应用中如何去构建一个传输的实例</h2><p>socket -&gt; 套接字</p>
<p>socket io</p>
<p>file io</p>
<h2 id="通讯过程中的阻塞"><a href="#通讯过程中的阻塞" class="headerlink" title="通讯过程中的阻塞"></a>通讯过程中的阻塞</h2><p>accept阻塞(连接阻塞)</p>
<p>流操作的阻塞(read/write)</p>
<h2 id="滑动窗口的协议"><a href="#滑动窗口的协议" class="headerlink" title="滑动窗口的协议"></a>滑动窗口的协议</h2><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h2 id="BIO模型"><a href="#BIO模型" class="headerlink" title="BIO模型"></a>BIO模型</h2><blockquote>
<p>​    blocker  io 阻塞</p>
</blockquote>
<p>优化方案：</p>
<p>可以解决socket io阻塞，但是还是存在file io阻塞问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    Socket socket = server.accpet();</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> SocketThread(socket)).start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对socket进行操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>非阻塞</p>
<blockquote>
<p>​    new io / non blocker io</p>
</blockquote>
<p>多路复用机制</p>
<p>linux fd：linux系统中一切皆可看成是文件，文件描述符是内核为了高效管理已被打开的文件所创建的索引</p>
<p>serverSocket 向请求内核</p>
<p>先监听socket/fd，再如果发现socket/fd已就绪，就发送数据已经准备好的通知(即可以像该文件进行读写)，然后serverSocket再来发送read/write请求</p>
<p>linux提供的io复用机制</p>
<p>select/poll：轮询查询socket/fd是否已经就绪</p>
<p>epoll：事件机制，理解为注册监听机制，如果发现socket/fd就绪直接返回就绪通知，可以进行读写</p>
<h3 id="服务端的机器怎么去标记一个个的连接"><a href="#服务端的机器怎么去标记一个个的连接" class="headerlink" title="服务端的机器怎么去标记一个个的连接"></a>服务端的机器怎么去标记一个个的连接</h3><p>四元组：source_ip/source_port/target_ip/target_port </p>
<p>因为目标机器的ip和端口固定，所以最大连接数取决于客户端的数量</p>
<p>source_ip : 2^32</p>
<p>source_port:2^16 因为0不能作为端口，所以是65535个</p>
<ol>
<li>内存大小</li>
<li>文件句柄的限制</li>
<li>ulimit -n 默认是1024</li>
<li>带宽的资源</li>
</ol>
]]></content>
      <categories>
        <category>通讯协议</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk8 部分新特性</title>
    <url>/2019/07/11/java8-lambda%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="jdk1-8-时间的创建及工具类"><a href="#jdk1-8-时间的创建及工具类" class="headerlink" title="jdk1.8 时间的创建及工具类"></a>jdk1.8 时间的创建及工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Clock</span></span><br><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line">System.out.println(clock.millis());</span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">System.out.println(instant);</span><br><span class="line">Date from = Date.from(instant);</span><br><span class="line">System.out.println(from);</span><br><span class="line"><span class="comment">// 时区</span></span><br><span class="line"><span class="comment">// 获取所有时区</span></span><br><span class="line">Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">System.out.println(availableZoneIds);</span><br><span class="line"><span class="comment">// 获取指定时区的ZoneId</span></span><br><span class="line">ZoneId of = ZoneId.of(<span class="string">"Asia/Aden"</span>);</span><br><span class="line">System.out.println(of.getRules());</span><br><span class="line"></span><br><span class="line"><span class="comment">// localtime 获取指定时区的时间</span></span><br><span class="line">LocalTime now = LocalTime.now(of);</span><br><span class="line">System.out.println(<span class="string">"当前时间是："</span>+now);</span><br><span class="line"></span><br><span class="line"><span class="comment">// localData 本地日期</span></span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"今天的日期是："</span>+today);</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">System.out.println(<span class="string">"明天的日期是："</span>+tomorrow);</span><br><span class="line">LocalDate yesterday = today.plus(-<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">System.out.println(<span class="string">"昨天的日期是："</span>+yesterday);</span><br><span class="line"><span class="comment">// 创建指定日期</span></span><br><span class="line">LocalDate of1 = LocalDate.of(<span class="number">2019</span>, Month.JUNE, <span class="number">11</span>);</span><br><span class="line">System.out.println(of1);</span><br><span class="line">DayOfWeek dayOfWeek = of1.getDayOfWeek();</span><br><span class="line">System.out.println(<span class="string">"今天是周几："</span>+dayOfWeek);</span><br><span class="line"><span class="comment">// DateTimeFormatter格式化时间</span></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String format = formatter.format(today);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">"ddd2"</span>);</span><br><span class="line">stringList.add(<span class="string">"aaa2"</span>);</span><br><span class="line">stringList.add(<span class="string">"bbb1"</span>);</span><br><span class="line">stringList.add(<span class="string">"aaa1"</span>);</span><br><span class="line">stringList.add(<span class="string">"bbb3"</span>);</span><br><span class="line">stringList.add(<span class="string">"ccc"</span>);</span><br><span class="line">stringList.add(<span class="string">"bbb2"</span>);</span><br><span class="line">stringList.add(<span class="string">"ddd1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream 串行</span></span><br><span class="line"><span class="comment">// 过滤</span></span><br><span class="line">stringList</span><br><span class="line">     .stream()</span><br><span class="line">    .filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="comment">// 排序只是创建了一个排序好的stream，原数据并没有改变</span></span><br><span class="line">stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map映射,map操作</span></span><br><span class="line">stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .sorted((o1, o2) -&gt; o2.compareTo(o1))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配，任一一个匹配就可以返回</span></span><br><span class="line"><span class="keyword">boolean</span> anyMatch = stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .anyMatch(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(anyMatch);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配，所有匹配，所有匹配到才会返回true</span></span><br><span class="line"><span class="keyword">boolean</span> allMatch = stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .allMatch(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(allMatch);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配,没有匹配到的返回true，如果有匹配到的则返回false</span></span><br><span class="line"><span class="keyword">boolean</span> noneMatch = stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .noneMatch(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line">System.out.println(noneMatch);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数</span></span><br><span class="line"><span class="keyword">long</span> count = stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .count();</span><br><span class="line">System.out.println(count);</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规约,将集合整合为一个元素</span></span><br><span class="line">Optional&lt;String&gt; reduce = stringList</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .reduce((s, s2) -&gt; s + <span class="string">"#"</span> + s2);</span><br><span class="line">reduce.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="lambda语法创建接口"><a href="#lambda语法创建接口" class="headerlink" title="lambda语法创建接口"></a>lambda语法创建接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InteTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">(String string)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InteTest inteTest = string -&gt; &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;;</span><br><span class="line">        inteTest.initData(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务及SpringCloud的一些面试问题</title>
    <url>/2019/07/02/%E5%8A%A1%E5%8F%8ASpringCloud%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="soa和微服务的区别"><a href="#soa和微服务的区别" class="headerlink" title="soa和微服务的区别"></a>soa和微服务的区别</h2><p>   soa:面向服务的框架，着重于将应用系统根据不同的业务模块拆分不同的服务，并通过这些服务定义好的接口联系起来。它是一种粗粒度，松耦合的框架，主要解决的是服务重复性问题。</p>
<p>   微服务:微服务是soa架构下的最终产物，它相对soa来说对系统的拆分更加彻底，拆分粒度更细，拆分后的服务都可以单独的运行。微服务主要解决的是服务的高耦合问题，通过降低服务之间的耦合度来把服务分割的更彻底，每个服务都可以不依赖于其他服务而独立运行，当一个服务出问题时，对其他服务并不会造成影响。</p>
<p>   soa和微服务都是分布式的具体实现思想。</p>
<h2 id="你是怎么理解微服务的？"><a href="#你是怎么理解微服务的？" class="headerlink" title="你是怎么理解微服务的？"></a>你是怎么理解微服务的？</h2><p>   微服务顾名思义就是将系统拆分为一个个可以独立部署、水平扩展、独立运行的细微服务。</p>
<p>   使用微服务的思想通过对单体架构的系统进行细粒度的拆分，从而降低各个服务之间的耦合度，单个服务中如果出现问题而不会对其他服务产生影响。并且通过对系统的拆分，会极大的解决原单体架构系统中的有些业务运行速度过慢而对其他业务造成的影响。</p>
<h2 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是SpringCloud</h2><p>   SpringCloud可以通俗的理解为整合各个分布式基础设施的工具箱，它是一系列框架的有序集合，注重于服务治理。</p>
<h2 id="微服务架构的优点和缺点有哪些？"><a href="#微服务架构的优点和缺点有哪些？" class="headerlink" title="微服务架构的优点和缺点有哪些？"></a>微服务架构的优点和缺点有哪些？</h2><p>   微服务的主要作用是大型业务系统进行细粒度的拆分，从而降低项目开发时某一模块的开发对其他模块业务开发的影响，可以将项目中的各个模块更快地上线落地，相对传统的单体架构中一块出问题其他都会被影响，微服务带来的是更加敏捷的更新维护，当其中一个服务出问题时，其他服务不会受到影响。但是当系统拆分的太细致，造成的运维成本也相对的更大，梳理各服务的功能调用逻辑更麻烦，本来只需要对一个系统的维护现在变相的变成对多个系统的维护，这样的成本会大大的增大。</p>
<h2 id="SpringCloud解决了什么问题？"><a href="#SpringCloud解决了什么问题？" class="headerlink" title="SpringCloud解决了什么问题？"></a>SpringCloud解决了什么问题？</h2><p>   SpringCloud利用SpringBoot的开发便利性简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、熔断器、数据监控、负载均衡等，都可以利用SpringBoot的开发风格做到一键部署和启动。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发编程-volatile关键字</title>
    <url>/2019/06/26/latile/</url>
    <content><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="MESI协议"><a href="#MESI协议" class="headerlink" title="MESI协议"></a>MESI协议</h2><p>基于失效的缓存一致性协议</p>
<p>有四个状态:</p>
<ul>
<li>Exclusive(E)：独享，其他缓存都没有有效的副本</li>
<li>Shared(S)：共享，其他缓存都有有效的副本</li>
<li>Invalid(I)：失效</li>
<li>Modified(M)：修改</li>
</ul>
<h2 id="原子性、有序性、可见性"><a href="#原子性、有序性、可见性" class="headerlink" title="原子性、有序性、可见性"></a>原子性、有序性、可见性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>在java中，对基本数据类型的变量读取和赋值操作是原子性操作，这些操作是不可中断的，也就是要么读，要么不读，或者要么写要么不写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span>; <span class="comment">// 操作1</span></span><br><span class="line">y = x;	<span class="comment">// 操作2</span></span><br><span class="line">x++;	<span class="comment">// 操作3</span></span><br><span class="line">x = x + <span class="number">1</span>;<span class="comment">//操作4</span></span><br></pre></td></tr></table></figure>
<p>以上的操作中只有操作1属于原子性操作。</p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有以下这样的代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//volatile int x = 10; 如果x有volatile关键字修饰时,就可以保证有序性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu0</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">    x = <span class="number">100</span>;<span class="comment">// 此时x的状态变幻情况为：S(共享) -&gt; M(修改),此时通过cpu0会通知其他cpu的x的值为I(失效)，再取出最新值，会消耗一段时间才会将x的值修改完成</span></span><br><span class="line">    flag = <span class="keyword">true</span>;<span class="comment">// 当flag此时是E状态时，变化状态:E(独享) -&gt; M(修改)，此时flag的值会直接修改，并发送给其他cpu状态置为S(共享)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpu1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">   	System.out.println(x == <span class="number">100</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当有volatile关键字修饰时，会看到在程序运行时的汇编指令中会发现有locak指令，相当于一个内存屏障，会强制把缓存的操作写入主存。</p>
<p>当不能保证有序性时，打印输出的结果可能为false。所以在程序运行必须保证有序性。</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>在Java中，提供了volatile关键保证可见性。<br>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。<br>此外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
<h3 id="volatile、synchronized"><a href="#volatile、synchronized" class="headerlink" title="volatile、synchronized"></a>volatile、synchronized</h3><p>volatile可以保证对变量操作的有序性、可见性，但是不能保证原子性</p>
<p>synchronized可以保证对变量的有序性、可见性、原子性</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的5种io模型</title>
    <url>/2019/06/11/nux%E7%9A%845%E4%B8%ADio%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="linux的5种io模型"><a href="#linux的5种io模型" class="headerlink" title="linux的5种io模型"></a>linux的5种io模型</h2><h3 id="阻塞式io"><a href="#阻塞式io" class="headerlink" title="阻塞式io"></a>阻塞式io</h3><h3 id="非阻塞式io"><a href="#非阻塞式io" class="headerlink" title="非阻塞式io"></a>非阻塞式io</h3><h3 id="信号驱动式io"><a href="#信号驱动式io" class="headerlink" title="信号驱动式io"></a>信号驱动式io</h3><h3 id="io复用模式"><a href="#io复用模式" class="headerlink" title="io复用模式"></a>io复用模式</h3><h3 id="异步io"><a href="#异步io" class="headerlink" title="异步io"></a>异步io</h3>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>URL与URI的区别</title>
    <url>/2019/06/05/RL%E4%B8%8EURI%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="URL、URI的区别"><a href="#URL、URI的区别" class="headerlink" title="URL、URI的区别"></a>URL、URI的区别</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="URL-统一资源定位符"><a href="#URL-统一资源定位符" class="headerlink" title="URL:统一资源定位符"></a>URL:统一资源定位符</h3><p>代表的是一个具体的资源位置，如<code>http://localhost:8081/spring/demo/query?name=1</code></p>
<h3 id="URI：统一资源标识符"><a href="#URI：统一资源标识符" class="headerlink" title="URI：统一资源标识符"></a>URI：统一资源标识符</h3><p>用于标识互联网资源名称的字符串，URI最常见的形式是URL，所有URL是URI的子集，URI属于URL更好层次的抽象，一种字符串文本标准。如<code>/spring/demo/query</code>，着重于表示资源的名称</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的.</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录</p>
<p>一个URL例如：<code>http://localhost:8081/spring/demo/query?name=1</code></p>
<p>组成部分为：schema://host[:port]/path/…/?[url-params]#[query-string]</p>
<p>包含以下组成部分：</p>
<ul>
<li>schema：指定应用层使用的协议，例如：http，https，ftp</li>
<li>host：http服务器的域名或ip</li>
<li>port：端口，可选项，80端口可以不填，如果使用了其他端口，则必须说明</li>
<li>path：请求的路径</li>
<li>query-string：请求参数</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Arrays.asList()的使用</title>
    <url>/2019/05/29/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="Arrays-asList-的使用"><a href="#Arrays-asList-的使用" class="headerlink" title="Arrays.asList()的使用"></a>Arrays.asList()的使用</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysToListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArrays(nums);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; ints = Arrays.asList(nums);</span><br><span class="line">        printArrays(ints);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Integer[] integers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArrays(integers);</span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(integers);</span><br><span class="line">        printArrays(integerList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrays</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        list.forEach(o -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">int</span>[]) &#123;</span><br><span class="line">                printArrays((<span class="keyword">int</span>[]) o);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrays</span><span class="params">(Integer[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            System.out.print(num+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrays</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            System.out.print(num+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>   当使用Arrays.asList(nums);转换的数组内容为基本数据类型时，转换后的list集合的存放的也是这个基本数据类型的数组，而不是这个基本数据类型的值。</p>
</blockquote>
<blockquote>
<p>   如果要对转换后的list进行增删改操作，则需要以new的方式来创建list</p>
</blockquote>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p><strong>使用其包装类型:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] integers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(integers));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Integer(-128~127)值的==和equals比较</title>
    <url>/2019/05/29/va-Integer-128-127-%E5%80%BC%E7%9A%84-%E5%92%8Cequals%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p><em>有如下代码：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">127</span>;</span><br><span class="line">Integer i2 = <span class="number">127</span>;</span><br><span class="line">System.out.print(i1+<span class="string">" == "</span>+i2+<span class="string">" :"</span>+(i1 == i2));</span><br><span class="line">System.out.println(<span class="string">"    "</span>+i1+<span class="string">".equals("</span>+i2+<span class="string">") :"</span>+(i1.equals(i2)));</span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">128</span>;</span><br><span class="line">Integer i4 = <span class="number">128</span>;</span><br><span class="line">System.out.print(i3+<span class="string">" == "</span>+i4+<span class="string">" :"</span>+(i3 == i4));</span><br><span class="line">System.out.println(<span class="string">"   "</span>+i3+<span class="string">".equals("</span>+i4+<span class="string">") :"</span>+(i3.equals(i4)));</span><br><span class="line"></span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">System.out.print(i5+<span class="string">" == "</span>+i6+<span class="string">" :"</span>+(i5 == i6));</span><br><span class="line">System.out.println(<span class="string">"   "</span>+i5+<span class="string">".equals("</span>+i6+<span class="string">") :"</span>+(i5.equals(i6)));</span><br><span class="line"></span><br><span class="line">Integer i7 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">Integer i8 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">System.out.print(i7+<span class="string">" == "</span>+i8+<span class="string">" :"</span>+(i7 == i8));</span><br><span class="line">System.out.println(<span class="string">"   "</span>+i7+<span class="string">".equals("</span>+i8+<span class="string">") :"</span>+(i7.equals(i8)));</span><br><span class="line"></span><br><span class="line">Integer i9 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i10 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i11 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">"i9=i10+i11   "</span> + (i9 == i10 + i11));</span><br></pre></td></tr></table></figure>
<p><em>输出结果如下：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127</span> == <span class="number">127</span> :<span class="keyword">true</span>    <span class="number">127</span>.equals(<span class="number">127</span>) :<span class="keyword">true</span></span><br><span class="line"><span class="number">128</span> == <span class="number">128</span> :<span class="keyword">false</span>   <span class="number">128</span>.equals(<span class="number">128</span>) :<span class="keyword">true</span></span><br><span class="line"><span class="number">127</span> == <span class="number">127</span> :<span class="keyword">false</span>   <span class="number">127</span>.equals(<span class="number">127</span>) :<span class="keyword">true</span></span><br><span class="line"><span class="number">128</span> == <span class="number">128</span> :<span class="keyword">false</span>   <span class="number">128</span>.equals(<span class="number">128</span>) :<span class="keyword">true</span></span><br><span class="line">i9=i10+i11   <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p><em>总结:</em></p>
<blockquote>
<ol>
<li>在-128~127的Integer值如果以<code>Integer x = value;</code>的方式赋值的Integer值在进行==和equals比较时，都会返回true</li>
<li>在-128~127之外的以<code>Integer x = value;</code>的方式赋值的Integer值在进行==和equals比较时，返回结果并不下相同</li>
<li>无论是在-128~127还是之外的Integer值如果以<code>Integer x = new Integer(value);</code>的方式赋值的Integer值在进行==和equals比较时,返回结果都并不x相同</li>
<li>因为Java里面对处在在-128~127之间的使用<code>Integer x = value;</code>赋值的Integer值，用的是原生数据类型int，会在内存里供重用，也就是说这之间的Integer值进行==比较时只是进行int原生数据类型的数值比较，而超出-128~127的范围，进行==比较时是进行地址及数值比较。</li>
<li>而对于所有以<code>Integer x = new Integer(value);</code>赋值的Integer值，使用== 比较时是进行地址及数值比较。</li>
<li>语句 i9 == i10 + i11，因为+这个操作符不适用于 Integer 对象，首先 i10 和 i11 进行自动拆箱操作，进行数值相加，即 i9 == 40。然后 Integer 对象无法与数值进行直接比较，所以 i9 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较</li>
<li>所以在比较包装类型的值时，必须使用equals进行比较</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Integer</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式的基础知识</title>
    <url>/2019/05/29/%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>内存消耗小</li>
<li>全局只有一个实例</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>没有接口，扩展困难</li>
<li>如果要扩展单例，只能修改代码</li>
</ul>
<h3 id="创建单例的方法"><a href="#创建单例的方法" class="headerlink" title="创建单例的方法"></a>创建单例的方法</h3><h4 id="饿汉式模式"><a href="#饿汉式模式" class="headerlink" title="饿汉式模式"></a>饿汉式模式</h4><ul>
<li>直接创建-消耗内存-线程不安全</li>
<li>静态创建-线程不安全</li>
</ul>
<h4 id="懒汉式模式"><a href="#懒汉式模式" class="headerlink" title="懒汉式模式"></a>懒汉式模式</h4><ul>
<li>判断为空再创建-线程不安全</li>
<li>双重检验为空再创建 使用synchronize关键字-线程安全</li>
<li>静态内部类创建-线程安全</li>
</ul>
<h4 id="注册式创建"><a href="#注册式创建" class="headerlink" title="注册式创建"></a>注册式创建</h4><ul>
<li>简单注册-spring</li>
<li>枚举类创建</li>
</ul>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h3 id="关于单例模式的问题"><a href="#关于单例模式的问题" class="headerlink" title="关于单例模式的问题"></a>关于单例模式的问题</h3><h4 id="spring的单例会被回收吗？"><a href="#spring的单例会被回收吗？" class="headerlink" title="spring的单例会被回收吗？"></a>spring的单例会被回收吗？</h4><ul>
<li>注册式单例，被保存在ioc的缓存容器中，给每个实例起个名字，叫beanName、id</li>
<li>ioc容器持有单例对象的引用</li>
<li>当对象为null或引用不被任何地方所持有时会被回收</li>
<li>ioc容器本身也是个单例，ioc容器什么时候被回收，那么ioc中的beanName也就什么时候被回收</li>
<li>ioc容器实在spring启动时初始化，在spring销毁时被回收</li>
<li>spring中的单例Bean跟ioc容器同生死</li>
</ul>
<h4 id="spring的单例是线程安全的吗？"><a href="#spring的单例是线程安全的吗？" class="headerlink" title="spring的单例是线程安全的吗？"></a>spring的单例是线程安全的吗？</h4><ul>
<li>它由在beanFactory中由反射机制创建，被缓存到ioc容器中，相当于new Object()</li>
<li>所以他是线程安全的</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown特殊语法</title>
    <url>/2019/05/22/arkdown%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img clipboard.png 图片1 %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2019/05/15/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h2><h3 id="上传-下载文件"><a href="#上传-下载文件" class="headerlink" title="上传-下载文件"></a>上传-下载文件</h3><p>上传和下载文件使用rz和sz命令</p>
<p>使用以下命令安装rz和sz：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<p>打开选择文件窗口<br><img src="/2019/05/15/linux命令/rz.png" title="linux"><br>选择文件即可上传</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>输入以下命令：<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sz 文件名</span><br></pre></td></tr></table></figure></p>
<p>打开文件要下载的地址<br><img src="/2019/05/15/linux命令/sz.png" title="linux"><br>选择路径下载即可</p>
<h3 id="ssh传输文件"><a href="#ssh传输文件" class="headerlink" title="ssh传输文件"></a>ssh传输文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp test.zip admin@192.168.1.1:/test</span><br><span class="line"></span><br><span class="line">解析：scp 文件名 ssh地址:要复制的文件到远程机的路径</span><br></pre></td></tr></table></figure>
<h3 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开文件：vi test.txt</span><br><span class="line">Ctrl+u：向文件首翻半屏；</span><br><span class="line">Ctrl+d：向文件尾翻半屏；</span><br><span class="line">Ctrl+f：向文件尾翻一屏；</span><br><span class="line">Ctrl+b：向文件首翻一屏；</span><br><span class="line">Esc：从编辑模式切换到命令模式；</span><br><span class="line">ZZ：命令模式下保存当前文件所做的修改后退出vi；</span><br><span class="line">:行号：光标跳转到指定行的行首；</span><br><span class="line">:$：光标跳转到最后一行的行首；</span><br><span class="line">x或X：删除一个字符，x删除光标后的，而X删除光标前的；</span><br><span class="line">D：删除从当前光标到光标所在行尾的全部字符；</span><br><span class="line">dd：删除光标行正行内容；</span><br><span class="line">ndd：删除当前行及其后n-1行；</span><br><span class="line">nyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；</span><br><span class="line">p：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；</span><br><span class="line">P：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；</span><br><span class="line">/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class="line">？字符串：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；</span><br><span class="line">a，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；</span><br><span class="line">a：在当前字符后添加文本；</span><br><span class="line">A：在行末添加文本；</span><br><span class="line">i：在当前字符前插入文本；</span><br><span class="line">I：在行首插入文本；</span><br><span class="line">o：在当前行后面插入一空行；</span><br><span class="line">O：在当前行前面插入一空行；</span><br><span class="line">:wq：在命令模式下，执行存盘退出操作；</span><br><span class="line">:w：在命令模式下，执行存盘操作；</span><br><span class="line">:w！：在命令模式下，执行强制存盘操作；</span><br><span class="line">:q：在命令模式下，执行退出vi操作；</span><br><span class="line">:q！：在命令模式下，执行强制退出vi操作；</span><br><span class="line">:e文件名：在命令模式下，打开并编辑指定名称的文件；</span><br><span class="line">:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；</span><br><span class="line">:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；</span><br><span class="line">:set number：在命令模式下，用于在最左端显示行号；</span><br><span class="line">:set nonumber：在命令模式下，用于在最左端不显示行号；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>动态壁纸</title>
    <url>/2019/05/15/%E5%A3%81%E7%BA%B8/</url>
    <content><![CDATA[<h3 id="动态壁纸软件"><a href="#动态壁纸软件" class="headerlink" title="动态壁纸软件"></a>动态壁纸软件</h3><blockquote>
<p>   <a href="https://store.steampowered.com/app/431960/Wallpaper_Engine/" target="_blank" rel="noopener">Wallpaper Engine</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>壁纸工具</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv参考链接</title>
    <url>/2019/05/06/pencv%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="基于java的opencv、tesseractc参考链接"><a href="#基于java的opencv、tesseractc参考链接" class="headerlink" title="基于java的opencv、tesseractc参考链接"></a>基于java的opencv、tesseractc参考链接</h3><ul>
<li><p><a href="https://blog.csdn.net/qq_34814092/article/details/85240465" target="_blank" rel="noopener">Intellij Idea 部署 OpenCV-4.0.0 环境</a></p>
</li>
<li><p><a href="https://www.jiqizhixin.com/articles/2018-10-16-3" target="_blank" rel="noopener">如何使用Tesseract和OpenCV执行OCR和文本识别</a></p>
</li>
<li><a href="http://tesseract-ocr.github.io/" target="_blank" rel="noopener">tesseract官方文档</a></li>
<li><a href="https://opencv-java-tutorials.readthedocs.io/en/latest/" target="_blank" rel="noopener">OpenCV Java Tutorials documentation!</a></li>
</ul>
<h3 id="Tesseract-OCR识别中文与训练字库实例"><a href="#Tesseract-OCR识别中文与训练字库实例" class="headerlink" title="Tesseract-OCR识别中文与训练字库实例"></a>Tesseract-OCR识别中文与训练字库实例</h3><ul>
<li><a href="https://www.cnblogs.com/wzben/p/5930538.html" target="_blank" rel="noopener">Tesseract-OCR识别中文与训练字库实例</a></li>
</ul>
]]></content>
      <categories>
        <category>人工识别</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ocr</tag>
        <tag>oepncv</tag>
        <tag>testseract</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交</title>
    <url>/2019/05/06/it%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h4 id="git提交步骤"><a href="#git提交步骤" class="headerlink" title="git提交步骤"></a>git提交步骤</h4><ul>
<li>git init //初始化仓库</li>
<li>git add .(文件name) //添加文件到本地仓库</li>
<li>git commit -m “first commit” //添加文件描述信息</li>
<li>git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支</li>
<li>git pull origin master // 把本地仓库的变化连接到远程仓库主分支</li>
<li>git push -u origin master //把本地仓库的文件推送到远程仓库</li>
</ul>
<h4 id="强制提交"><a href="#强制提交" class="headerlink" title="强制提交"></a>强制提交</h4><h5 id="如果确定代码无误，可以强制提交"><a href="#如果确定代码无误，可以强制提交" class="headerlink" title="如果确定代码无误，可以强制提交"></a>如果确定代码无误，可以强制提交</h5><ul>
<li>git push -f</li>
</ul>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>
<p>在merge、pull或push中出现以上错误，可以使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">merge时：</span><br><span class="line">git merge master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line">pull时：</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line">push时：</span><br><span class="line">git push -u origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>html5 audio配合span data-src-mp3使用</title>
    <url>/2019/04/26/ntitled/</url>
    <content><![CDATA[<h2 id="html5-audio配合span-data-src-mp3使用"><a href="#html5-audio配合span-data-src-mp3使用" class="headerlink" title="html5 audio配合span data-src-mp3使用"></a>html5 audio配合span data-src-mp3使用</h2><h4 id="编写html代码"><a href="#编写html代码" class="headerlink" title="编写html代码"></a>编写html代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;audio id=<span class="string">"player"</span> style=<span class="string">"display: none"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span> </span>= <span class="string">'1'</span> data-src-mp3=<span class="string">""</span> data-src-ogg=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">				</span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span> </span>= <span class="string">'2'</span> data-src-mp3=<span class="string">""</span> data-src-ogg=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="初始化span标签"><a href="#初始化span标签" class="headerlink" title="初始化span标签"></a>初始化span标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"span.1"</span>)</span><br><span class="line">    .attr(<span class="string">"data-src-mp3"</span>,<span class="string">"song1.mp3"</span>)</span><br><span class="line">    .attr(<span class="string">"data-src-ogg"</span>,<span class="string">"song1.ogg"</span>);</span><br><span class="line">$(<span class="string">"span.2"</span>)</span><br><span class="line">    .attr(<span class="string">"data-src-mp3"</span>,<span class="string">"song2.mp3"</span>)</span><br><span class="line">    .attr(<span class="string">"data-src-ogg"</span>,<span class="string">"song2.ogg"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="控制播放"><a href="#控制播放" class="headerlink" title="控制播放"></a>控制播放</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"span[data-src-mp3]"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> player = <span class="built_in">document</span>.getElementById(<span class="string">"player"</span>),</span><br><span class="line">        $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($<span class="keyword">this</span>.hasClass(<span class="string">"selected"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (player.paused) &#123;</span><br><span class="line">            player.play();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            player.pause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"span[data-src-mp3].selected"</span>).removeClass(<span class="string">"selected"</span>);</span><br><span class="line">        $<span class="keyword">this</span>.addClass(<span class="string">"selected"</span>);</span><br><span class="line">        $(player)</span><br><span class="line">            .empty()</span><br><span class="line">            .append($(<span class="string">"&lt;source&gt;"</span>).attr(<span class="string">"src"</span>, $<span class="keyword">this</span>.attr(<span class="string">"data-src-mp3"</span>)))</span><br><span class="line">            .append($(<span class="string">"&lt;source&gt;"</span>).attr(<span class="string">"src"</span>, $<span class="keyword">this</span>.attr(<span class="string">"data-src-ogg"</span>)))</span><br><span class="line">        <span class="comment">// 必须使用load重新加载audio，否则播放audio时，播放出来的还是最初始的资源</span></span><br><span class="line">        player.load();</span><br><span class="line">        player.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>audio</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目基础搭建</title>
    <url>/2019/03/15/ringBoot/</url>
    <content><![CDATA[<h2 id="什么是spring-boot"><a href="#什么是spring-boot" class="headerlink" title="什么是spring boot"></a>什么是spring boot</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。     —    <em>来自百度百科</em></p>
<h2 id="springboot-的特点"><a href="#springboot-的特点" class="headerlink" title="springboot 的特点"></a>springboot 的特点</h2><ol>
<li>创建独立的Spring应用程序</li>
<li>嵌入的Tomcat，无需部署WAR文件</li>
<li>简化Maven配置</li>
<li>自动配置Spring</li>
<li>提供生产就绪型功能，如指标，健康检查和外部配置</li>
<li>绝对没有代码生成并且对XML也没有配置要求</li>
</ol>
<h2 id="使用spring-boot有什么好处"><a href="#使用spring-boot有什么好处" class="headerlink" title="使用spring boot有什么好处"></a>使用spring boot有什么好处</h2><p>简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？</p>
<p>1）配置web.xml，加载spring和spring mvc</p>
<p>2）配置数据库连接、配置spring事务</p>
<p>3）配置加载配置文件的读取，开启注解</p>
<p>4）配置日志文件</p>
<p>…</p>
<p>配置完成之后部署tomcat 调试</p>
<p>…</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="maven构建项目"><a href="#maven构建项目" class="headerlink" title="maven构建项目"></a>maven构建项目</h3><p><strong>使用工具：</strong><br>IntelliJ IDEA 2018.3.4、jdk1.8.0_201</p>
<img src="/2019/03/15/ringBoot/idea-1.png" title="idea">
<p>在idea界面点击 <strong><em>Create New project</em></strong>,然后点击<strong><em>Next</em></strong></p>
<img src="/2019/03/15/ringBoot/idea-2.png" title="idea">
<p>选择<strong><em>Spring Initializar</em></strong>点击<strong><em>Next</em></strong></p>
<img src="/2019/03/15/ringBoot/idea-3.png" title="idea">
<p>设置初始java包结构点击<strong><em>Next</em></strong></p>
<img src="/2019/03/15/ringBoot/idea-4.png" title="idea">
<p>在此步骤选择springboot集成的其他框架，如mysql<br>然后点击<strong><em>Next</em></strong></p>
<img src="/2019/03/15/ringBoot/idea-5.png" title="idea">输入项目名称，点击<strong><em>finish</em></strong>即可完成创建springboot项目<br><br><strong>项目结构如下：</strong><img src="/2019/03/15/ringBoot/idea-6.png" title="springboot">
<ul>
<li>src/main/java/:    程序开发及主程序入口</li>
<li>src/main/resources/:    配置文件</li>
<li>src/test:    测试程序</li>
</ul>
<h4 id="引入web模块"><a href="#引入web模块" class="headerlink" title="引入web模块"></a>引入web模块</h4><h5 id="1、在pom文件中添加web模块依赖"><a href="#1、在pom文件中添加web模块依赖" class="headerlink" title="1、在pom文件中添加web模块依赖"></a>1、在pom文件中添加web模块依赖</h5>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <strong>pom.xml文件中默认有两个模块：</strong></p>
<p>spring-boot-starter：核心模块，包括自动配置支持、日志和YAML；</p>
<p>spring-boot-starter-test：测试模块，包括JUnit、Hamcrest、Mockito。</p>
<h5 id="2、编写-HelloWorldController"><a href="#2、编写-HelloWorldController" class="headerlink" title="2、编写 HelloWorldController"></a>2、编写 <strong><em>HelloWorldController</em></strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   @RestController的意思就是controller里面的方法都以json格式输出.</p>
<h5 id="3、启动主程序"><a href="#3、启动主程序" class="headerlink" title="3、启动主程序"></a>3、启动主程序</h5><pre><code>在浏览器打开http://127.0.0.1:8080/hello,即可看到结果
</code></pre><h4 id="开发环境的调试"><a href="#开发环境的调试" class="headerlink" title="开发环境的调试"></a>开发环境的调试</h4><p>springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>excel数据处理</title>
    <url>/2019/03/14/xcel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="excel中把一列数据中第一个空格前后的内容分为两列"><a href="#excel中把一列数据中第一个空格前后的内容分为两列" class="headerlink" title="excel中把一列数据中第一个空格前后的内容分为两列"></a>excel中把一列数据中第一个空格前后的内容分为两列</h3><p>设原内容在A列，则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B1=LEFT(A1,FIND(&quot;&quot;,A1))</span><br><span class="line">C1=MID(A1,FIND(&quot;&quot;,A1)+1,LEN(A1))</span><br></pre></td></tr></table></figure></p>
<h3 id="在一组数据中筛选包含另一组数据的某个数据的单元"><a href="#在一组数据中筛选包含另一组数据的某个数据的单元" class="headerlink" title="在一组数据中筛选包含另一组数据的某个数据的单元"></a>在一组数据中筛选包含另一组数据的某个数据的单元</h3><img src="/2019/03/14/xcel数据处理/clipboard.png" title="图片1">
<pre><code>使用MATCH(A2,$B$2:$B$13,0)
</code></pre><p><strong>公式里第三个参数的含义：</strong><br><img src="/2019/03/14/xcel数据处理/clipboard1.png" title="图片1"></p>
<p> 返回结果为位置，如果只需要知道是否存在则可用：</p>
<pre><code>IF(MATCH(A2,$B$2:$B$13,0)&gt;0,TRUE)
</code></pre>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql删除语句使用</title>
    <url>/2019/03/14/sql/</url>
    <content><![CDATA[<h2 id="mysql删除语句使用"><a href="#mysql删除语句使用" class="headerlink" title="mysql删除语句使用"></a>mysql删除语句使用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> t <span class="keyword">from</span> table_name t <span class="keyword">where</span> t.id = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="mysql-清空表数据"><a href="#mysql-清空表数据" class="headerlink" title="mysql 清空表数据"></a>mysql 清空表数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truncate table table_name;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器桌面端差异</title>
    <url>/2019/03/14/%E5%8A%A1%E5%99%A8%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<p><strong>javax.net.ssl.SSLKeyException: RSA premaster secret error错误的解决办法</strong>：</p>
<p>找到jre环境的lib/ext/sunjce_provider.jar</p>
<p>把这个放到程序的lib下</p>
]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>maven导出所有使用的jar包</title>
    <url>/2019/03/14/ven/</url>
    <content><![CDATA[<p><strong>maven导出所有使用的jar包</strong>:</p>
<pre><code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile 
</code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd运行java</title>
    <url>/2019/03/14/d%E8%BF%90%E8%A1%8Cjava/</url>
    <content><![CDATA[<h3 id="用命令行编译运行带有包或使用外部jar包的情况"><a href="#用命令行编译运行带有包或使用外部jar包的情况" class="headerlink" title="用命令行编译运行带有包或使用外部jar包的情况"></a>用命令行编译运行带有包或使用外部jar包的情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编译：javac -Djava.ext.dirs=./lib Test.java  或  javac -Djava.ext.dirs=D:/javacode/lib</span><br><span class="line"></span><br><span class="line">运行：java -Djava.ext.dirs=./lib Test </span><br><span class="line"></span><br><span class="line">将日志保存至文件中：java -Djava.ext.dirs=./lib Test &gt;&gt; log.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>notepad++ 字符串匹配</title>
    <url>/2019/03/12/tepad-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>匹配模式查找：<code>a.+?da</code></p>
<p>表示查找以a开头a结尾的</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>notepad++</tag>
      </tags>
  </entry>
  <entry>
    <title>python格式化字符串</title>
    <url>/2019/03/12/python/</url>
    <content><![CDATA[<h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><h4 id="各符号表示："><a href="#各符号表示：" class="headerlink" title="各符号表示："></a>各符号表示：</h4><pre><code>%d - 整数
%s - 字符串
%f  - 浮点数
%x - 十六进制整数
</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre><code>print(&apos;%2d-%02d&apos; % (3, 1))
print(&apos;%.2f&apos; % 3.1415926)
</code></pre><p>   <strong>解释：</strong></p>
<p>   %后数字若为一位表示位数，如若两位，第一位是补充数字，第二位是位数<br>    浮点数前加.<br>    %%表示转义为%</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>windows特殊字符</title>
    <url>/2019/03/12/ndows/</url>
    <content><![CDATA[<h3 id="windows特殊字符"><a href="#windows特殊字符" class="headerlink" title="windows特殊字符"></a>windows特殊字符</h3><p>版权符号：alt+169 ©   拼音：版权 © </p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>docker&amp;tomcat</title>
    <url>/2019/03/12/cker-tomcat/</url>
    <content><![CDATA[<h3 id="docker-简介"><a href="#docker-简介" class="headerlink" title="docker 简介"></a>docker 简介</h3><p> <strong>image(镜像)</strong>：对比iso镜像文件，不可操作，只能被pull下载下来使用或push将自己的镜像上传上去</p>
<p><strong>container(容器)</strong>:<br>    对比iso镜像中的live cd模式，不用直接安装需要的东西即可直接使用。但是一旦容器关闭，那么在容器中安装的vim或gcc都将会被销毁。如果要保存这些，就需要将当前容器封装成自己的镜像。</p>
<p><strong>repository(仓库)</strong>：<br>    类似于git，既可以将自己在git上下载下来的代码上传上去，也可以将自己上传上去的代码下载下来。只需要有别人的镜像的名字，标签。自己也可以将自己的镜像设置为私有。</p>
<h3 id="docker-启动和停止"><a href="#docker-启动和停止" class="headerlink" title="docker 启动和停止"></a>docker 启动和停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">停止当前tomcat应用：docker-compose down</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动tomcat应用：docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h3><h4 id="映射端口"><a href="#映射端口" class="headerlink" title="映射端口"></a>映射端口</h4><p><strong>将容器的8000端口映射到宿主机上的7001端口:</strong></p>
<pre><code>docker compose run -p 7001:8000 web python a.py runserver 0.0.0.0:8000
</code></pre><p>使用-p命令映射端口后，访问web应用需访问宿主机的端口7001</p>
<h4 id="启动注意"><a href="#启动注意" class="headerlink" title="启动注意"></a>启动注意</h4><p><code>docker compose run</code>启动一个容器时，如果service中有<code>--link</code>指定的其他服务没有运行，会先运行这些服务，–link依赖的这些服务都运行后，才会执行指定的命令。如果不想启动依赖的其他服务，可以使用<code>--no-deps</code>标识。<code>docker compnse run --no-deps web python manage.py shell</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>jfinal 文件上传特殊处理</title>
    <url>/2019/03/12/inal/</url>
    <content><![CDATA[<h3 id="jfinal-文件上传特殊处理"><a href="#jfinal-文件上传特殊处理" class="headerlink" title="jfinal 文件上传特殊处理"></a>jfinal 文件上传特殊处理</h3><p>如果页面中form中有<code>enctype=&quot;multipart/form-data&quot;</code>属性，在后台接收数据时先使用<code>getFile</code>，再使用<code>getPara()</code>;</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jfinal</tag>
      </tags>
  </entry>
  <entry>
    <title>js特殊用法</title>
    <url>/2019/03/12/js%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><h4 id="获取json"><a href="#获取json" class="headerlink" title="获取json"></a>获取json</h4><p>JS里使用 <strong><em>$!{string}</em></strong> 获取原格式的字符串；</p>
<img src="/2019/03/12/js特殊用法/clipboard.png" title="图片1">
<img src="/2019/03/12/js特殊用法/clipboard1.png" title="图片2">
<p>出现此种错误时，将<em>${}</em> 改为<em>$!{}</em> 使用</p>
<h4 id="js-动态元素选择器"><a href="#js-动态元素选择器" class="headerlink" title="js 动态元素选择器"></a>js 动态元素选择器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> head=<span class="string">"head"</span>+i;</span><br><span class="line">$(<span class="string">"#head"</span>+head+<span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<h3 id="使用js处理双击、选中事件"><a href="#使用js处理双击、选中事件" class="headerlink" title="使用js处理双击、选中事件"></a>使用js处理双击、选中事件</h3><h4 id="jquery-处理方式"><a href="#jquery-处理方式" class="headerlink" title="jquery 处理方式"></a>jquery 处理方式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>.body).on(<span class="string">'mouseup'</span>,<span class="string">"#content"</span>,mouseUp);</span><br></pre></td></tr></table></figure>
<h4 id="dom处理方式："><a href="#dom处理方式：" class="headerlink" title="dom处理方式："></a>dom处理方式：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"dblclick"</span>, doubleClick, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h4 id="释放鼠标处理函数"><a href="#释放鼠标处理函数" class="headerlink" title="释放鼠标处理函数"></a>释放鼠标处理函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">        text = <span class="built_in">window</span>.getSelection().toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection &amp;&amp; <span class="built_in">document</span>.selection.type != <span class="string">"Control"</span>) &#123;</span><br><span class="line">        text = <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">""</span> != text&amp;&amp;<span class="string">" "</span> != text) &#123;</span><br><span class="line">    	$(<span class="string">"#checkText"</span>).val(text);</span><br><span class="line">    	layer.msg(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="js计算"><a href="#js计算" class="headerlink" title="js计算"></a>js计算</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">5</span>/<span class="number">2</span>); 结果：<span class="number">2</span> 舍弃小数部分，取整数</span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">5</span>/<span class="number">2</span>); 结果：<span class="number">3</span> 向上取整，有小时就整数加一</span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">5</span>/<span class="number">2</span>);结果：<span class="number">3</span> 四舍五入</span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">5</span>/<span class="number">2</span>);结果：<span class="number">2</span> 向下取整</span><br></pre></td></tr></table></figure>
<h3 id="js给指定一篇文章添加行号"><a href="#js给指定一篇文章添加行号" class="headerlink" title="js给指定一篇文章添加行号"></a>js给指定一篇文章添加行号</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLineNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $lineNum=$(<span class="string">"#lineNum"</span>);</span><br><span class="line"></span><br><span class="line">$lineNum.empty();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rowNum=<span class="built_in">Math</span>.round(<span class="built_in">document</span>.getElementById(<span class="string">"contentT"</span>).scrollHeight/<span class="built_in">parseFloat</span>($(<span class="string">"#contentT"</span>).css(<span class="string">"line-height"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"$('.article fl').height():"</span>+<span class="built_in">document</span>.getElementById(<span class="string">"contentT"</span>).scrollHeight);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"parseFloat($('.article fl').css('line-height')):"</span>+<span class="built_in">parseFloat</span>($(<span class="string">"#contentT"</span>).css(<span class="string">"line-height"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rowNum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;rowNum;i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> flag=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(headNum&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">2</span>;j&lt;=headNum;j++)&#123;</span><br><span class="line">			<span class="keyword">var</span> headId=<span class="string">"head"</span>+j;</span><br><span class="line">			<span class="keyword">var</span> $headEle=$(<span class="string">"#"</span>+headId+<span class="string">""</span>);</span><br><span class="line">			<span class="keyword">var</span> offsetTop=$headEle.position().top;</span><br><span class="line">			<span class="keyword">var</span> headRow=<span class="built_in">Math</span>.round(offsetTop/<span class="built_in">parseFloat</span>($(<span class="string">"#contentT"</span>).css(<span class="string">"line-height"</span>)));</span><br><span class="line">			headRow=headRow+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(headRow==i)&#123;</span><br><span class="line">				flag=<span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>||i==<span class="number">1</span>)&#123;</span><br><span class="line">			$lineNum.append(<span class="string">"&lt;br&gt;&lt;p&gt;"</span>+i+<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			$lineNum.append(<span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">			$lineNum.append(<span class="string">"&lt;p&gt;"</span>+i+<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">			$lineNum.append(<span class="string">"&lt;p&gt;"</span>+i+<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			$lineNum.append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="js对象转换"><a href="#js对象转换" class="headerlink" title="js对象转换"></a>js对象转换</h3><h4 id="jquery对象dom对象"><a href="#jquery对象dom对象" class="headerlink" title="jquery对象dom对象"></a>jquery对象<->dom对象</-></h4><h5 id="dom对象转换为jquery对象："><a href="#dom对象转换为jquery对象：" class="headerlink" title="dom对象转换为jquery对象："></a>dom对象转换为jquery对象：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);	<span class="comment">//对象d为DOM对象</span></span><br><span class="line"><span class="keyword">var</span> s=$(d);	<span class="comment">//对象s为Jquery对象</span></span><br></pre></td></tr></table></figure>
<h5 id="jquery对象转换为dom对象："><a href="#jquery对象转换为dom对象：" class="headerlink" title="jquery对象转换为dom对象："></a>jquery对象转换为dom对象：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);   <span class="comment">//对象d为DOM对象</span></span><br><span class="line"><span class="keyword">var</span> s=$(d);	<span class="comment">//对象s为Jquery对象</span></span><br><span class="line"><span class="keyword">var</span> dd=s.get(<span class="number">0</span>)	<span class="comment">//对象dd为DOM对象</span></span><br></pre></td></tr></table></figure>
<h3 id="js随机打乱数组"><a href="#js随机打乱数组" class="headerlink" title="js随机打乱数组"></a>js随机打乱数组</h3> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomsort</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random()&gt;<span class="number">.5</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//用Math.random()函数生成0~1之间的随机数与0.5比较，返回-1或1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.sort(randomsort);</span><br></pre></td></tr></table></figure>
<h3 id="js从数组中获取指定个数的随机数据"><a href="#js从数组中获取指定个数的随机数据" class="headerlink" title="js从数组中获取指定个数的随机数据"></a>js从数组中获取指定个数的随机数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从数组中随机取指定数量的数据</span><br><span class="line"> * @param arr 数据</span><br><span class="line"> * @param count 随机数量</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function getRandomArrayElements(arr, count) &#123;</span><br><span class="line">    var shuffled = arr.slice(0), i = arr.length, min = i - count, temp, index;</span><br><span class="line">    while (i-- &gt; min) &#123;</span><br><span class="line">        index = Math.floor((i + 1) * Math.random());</span><br><span class="line">        temp = shuffled[index];</span><br><span class="line">        shuffled[index] = shuffled[i];</span><br><span class="line">        shuffled[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return shuffled.slice(min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="js禁止双击"><a href="#js禁止双击" class="headerlink" title="js禁止双击"></a>js禁止双击</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body onselectstart = &quot;return false&quot; style = &#123; -moz-user-select : none &#125;&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="js控制div里的滚动条"><a href="#js控制div里的滚动条" class="headerlink" title="js控制div里的滚动条"></a>js控制div里的滚动条</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.dtcon'</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="string">'0px'</span>&#125;, <span class="number">200</span>);</span><br><span class="line"><span class="number">200</span>:滚动条移动至指定位置所需时间 ms</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>form表单外不同的按钮提交到不同的url</title>
    <url>/2019/03/08/html/</url>
    <content><![CDATA[<h2 id="form表单外不同的按钮提交到不同的url"><a href="#form表单外不同的按钮提交到不同的url" class="headerlink" title="form表单外不同的按钮提交到不同的url"></a>form表单外不同的按钮提交到不同的url</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">hidden</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"rel"</span> <span class="attr">id</span>=<span class="string">"rel"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"answer"</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"curPage"</span> <span class="attr">id</span>=<span class="string">"curPage"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"examName"</span> <span class="attr">id</span>=<span class="string">"examName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">typr</span>=<span class="string">'button'</span> <span class="attr">id</span>=<span class="string">'but1'</span> <span class="attr">class</span>=<span class="string">'but1'</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">typr</span>=<span class="string">'button'</span> <span class="attr">id</span>=<span class="string">'but2'</span> <span class="attr">class</span>=<span class="string">'but2'</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>,<span class="string">'button.but1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#form"</span>).attr(<span class="string">"action"</span>,<span class="string">"url"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#form"</span>).submit();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>,<span class="string">'button.but1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#form"</span>).attr(<span class="string">"action"</span>,<span class="string">"url"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#form"</span>).submit();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/03/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
